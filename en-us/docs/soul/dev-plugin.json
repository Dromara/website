{
  "filename": "dev-plugin.md",
  "__html": "<h2>description</h2>\n<ul>\n<li>\n<p>Plugins are core executors of soul gateway. Every plugin handles matched requests when enabled.</p>\n</li>\n<li>\n<p>There are two kinds of plugins in the soul gateway:</p>\n<ul>\n<li>\n<p>The first type is a call chain with a single responsibility, and traffic cannot be customized.</p>\n</li>\n<li>\n<p>The other one can do its own chain of responsibility for matched traffic.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>You could reference from soul-plugin module and develop plugins by yourself. Please fire pull requests of your wonderful plugins without hesitate.</p>\n</li>\n</ul>\n<h2>single responsibility plugins</h2>\n<ul>\n<li>Add following dependency:</li>\n</ul>\n<pre><code> &lt;dependency&gt;\n        &lt;groupId&gt;org.dromara&lt;/groupId&gt;\n        &lt;artifactId&gt;soul-plugin-api&lt;/artifactId&gt;\n        &lt;version&gt;${last.version}&lt;/version&gt;\n  &lt;/dependency&gt;\n</code></pre>\n<ul>\n<li>Declare a new class named &quot;A&quot; and implements <code>org.dromara.soul.plugin.api.SoulPlugin</code></li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">SoulPlugin</span> </span>{\n    \n    <span class=\"hljs-comment\">/**\n     * Process the Web request and (optionally) delegate to the next\n     * {<span class=\"hljs-doctag\">@code</span> WebFilter} through the given {<span class=\"hljs-doctag\">@link</span> SoulPluginChain}.\n     *\n     * <span class=\"hljs-doctag\">@param</span> exchange the current server exchange\n     * <span class=\"hljs-doctag\">@param</span> chain    provides a way to delegate to the next filter\n     * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> Mono&lt;Void&gt;} to indicate when request processing is complete\n     */</span>\n    <span class=\"hljs-function\">Mono&lt;Void&gt; <span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(ServerWebExchange exchange, SoulPluginChain chain)</span></span>;\n    \n    <span class=\"hljs-comment\">/**\n     * return plugin order .\n     * This attribute To determine the plugin execution order in the same type plugin.\n     *\n     * <span class=\"hljs-doctag\">@return</span> int order\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getOrder</span><span class=\"hljs-params\">()</span></span>;\n    \n    <span class=\"hljs-comment\">/**\n     * acquire plugin name.\n     * this is plugin name define you must offer the right name.\n     * if you impl AbstractSoulPlugin this attribute not use.\n     *\n     * <span class=\"hljs-doctag\">@return</span> plugin name.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> String <span class=\"hljs-title\">named</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n    }\n    \n    <span class=\"hljs-comment\">/**\n     * plugin is execute.\n     * if return true this plugin can not execute.\n     *\n     * <span class=\"hljs-doctag\">@param</span> exchange the current server exchange\n     * <span class=\"hljs-doctag\">@return</span> default false.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> Boolean <span class=\"hljs-title\">skip</span><span class=\"hljs-params\">(ServerWebExchange exchange)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n    }\n}\n\n</code></pre>\n<ul>\n<li>\n<p>Detailed instruction of interface methods:</p>\n<ul>\n<li>\n<p><code>execute()</code> core method, you can do any task here freely.</p>\n</li>\n<li>\n<p><code>getOrder()</code> get the order of current plugin.</p>\n</li>\n<li>\n<p><code>named()</code> acquire the name of specific plugin.</p>\n</li>\n<li>\n<p><code>skip()</code> determines whether this plugin should be skipped under certain conditions.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Register plugin in Spring as a Bean, or simply apply <code>@Component</code> in implementation class.</p>\n</li>\n</ul>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SoulPlugin <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> A();\n    }\n</code></pre>\n<h2>Matching traffic processing plugin</h2>\n<ul>\n<li>Introduce the following dependency:</li>\n</ul>\n<pre><code class=\"language-xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>soul-plugin-base<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${last.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<ul>\n<li>\n<p>Add a new class A, inherit from <code>org.dromara.soul.plugin.base.AbstractSoulPlugin</code></p>\n</li>\n<li>\n<p>examples down below:</p>\n</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * This is your custom plugin.\n * He is running in after before plugin, implement your own functionality.\n * extends AbstractSoulPlugin so you must user soul-admin And add related plug-in development.\n *\n * <span class=\"hljs-doctag\">@author</span> xiaoyu(Myth)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CustomPlugin</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractSoulPlugin</span> </span>{\n    \n    <span class=\"hljs-comment\">/**\n     * return plugin order .\n     * The same plugin he executes in the same order.\n     *\n     * <span class=\"hljs-doctag\">@return</span> int\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getOrder</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * acquire plugin name.\n     * return you custom plugin name.\n     * It must be the same name as the plug-in you added in the admin background.\n     *\n     * <span class=\"hljs-doctag\">@return</span> plugin name.\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">named</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"soul\"</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * plugin is execute.\n     * Do I need to skip.\n     * if you need skip return true.\n     *\n     * <span class=\"hljs-doctag\">@param</span> exchange the current server exchange\n     * <span class=\"hljs-doctag\">@return</span> default false.\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Boolean <span class=\"hljs-title\">skip</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> Mono&lt;Void&gt; <span class=\"hljs-title\">doExecute</span><span class=\"hljs-params\">(ServerWebExchange exchange, SoulPluginChain chain, SelectorZkDTO selector, RuleZkDTO rule)</span> </span>{\n        LOGGER.debug(<span class=\"hljs-string\">\".......... function plugin start..............\"</span>);\n        <span class=\"hljs-comment\">/*\n         * Processing after your selector matches the rule.\n         * rule.getHandle() is you Customize the json string to be processed.\n         * for this example.\n         * Convert your custom json string pass to an entity class.\n         */</span>\n        <span class=\"hljs-keyword\">final</span> String ruleHandle = rule.getHandle();\n\n        <span class=\"hljs-keyword\">final</span> Test test = GsonUtils.getInstance().fromJson(ruleHandle, Test<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n\n        <span class=\"hljs-comment\">/*\n         * Then do your own business processing.\n         * The last execution  chain.execute(exchange).\n         * Let it continue on the chain until the end.\n         */</span>\n        System.out.println(test.toString());\n        <span class=\"hljs-keyword\">return</span> chain.execute(exchange);\n    }\n}\n\n</code></pre>\n<ul>\n<li>\n<p>Detailed explanation:</p>\n<ul>\n<li>\n<p>Plugins will match the selector rule for customized plugins inherit from this abstract class. Following steps guide you to config your plugins.</p>\n</li>\n<li>\n<p>Firstly define a new plugin in <code>soul-admin</code>, please mind that your plugin name should match the named() method overridden in your class.</p>\n</li>\n<li>\n<p>Re-login  <code>soul-admin</code>, the plugin you added now showing on plugin-list page, you can choose selectors for matching.</p>\n</li>\n<li>\n<p>There is a field named <code>handler</code> in rules, it is customized json string to be processed. You can process data after acquiring a ruleHandle (<code>final String ruleHandle = rule.getHandle();</code>) in <code>doExecute()</code> method.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Register plugin in Spring as a Bean, or simply apply <code>@Component</code> in implementation class.</p>\n</li>\n</ul>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SoulPlugin <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> A();\n    }\n</code></pre>\n<h2>Subscribe your plugin data and do customized jobs</h2>\n<ul>\n<li>Declare a new class named &quot;A&quot; and implements <code>org.dromara.soul.plugin.base.handler.PluginDataHandler</code></li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">PluginDataHandler</span> </span>{\n    \n    <span class=\"hljs-comment\">/**\n     * Handler plugin.\n     *\n     * <span class=\"hljs-doctag\">@param</span> pluginData the plugin data\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handlerPlugin</span><span class=\"hljs-params\">(PluginData pluginData)</span> </span>{\n    }\n    \n    <span class=\"hljs-comment\">/**\n     * Remove plugin.\n     *\n     * <span class=\"hljs-doctag\">@param</span> pluginData the plugin data\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removePlugin</span><span class=\"hljs-params\">(PluginData pluginData)</span> </span>{\n    }\n    \n    <span class=\"hljs-comment\">/**\n     * Handler selector.\n     *\n     * <span class=\"hljs-doctag\">@param</span> selectorData the selector data\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handlerSelector</span><span class=\"hljs-params\">(SelectorData selectorData)</span> </span>{\n    }\n    \n    <span class=\"hljs-comment\">/**\n     * Remove selector.\n     *\n     * <span class=\"hljs-doctag\">@param</span> selectorData the selector data\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeSelector</span><span class=\"hljs-params\">(SelectorData selectorData)</span> </span>{\n    }\n    \n    <span class=\"hljs-comment\">/**\n     * Handler rule.\n     *\n     * <span class=\"hljs-doctag\">@param</span> ruleData the rule data\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handlerRule</span><span class=\"hljs-params\">(RuleData ruleData)</span> </span>{\n    }\n    \n    <span class=\"hljs-comment\">/**\n     * Remove rule.\n     *\n     * <span class=\"hljs-doctag\">@param</span> ruleData the rule data\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeRule</span><span class=\"hljs-params\">(RuleData ruleData)</span> </span>{\n    }\n    \n    <span class=\"hljs-comment\">/**\n     * Plugin named string.\n     *\n     * <span class=\"hljs-doctag\">@return</span> the string\n     */</span>\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">pluginNamed</span><span class=\"hljs-params\">()</span></span>;\n    \n}\n</code></pre>\n<ul>\n<li>\n<p>Ensure <code>pluginNamed()</code> is same as the plugin name you defined.</p>\n</li>\n<li>\n<p>Register defined class as a Spring Bean, or simply apply <code>@Component</code> in implementation class.</p>\n</li>\n</ul>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> PluginDataHandler <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> A();\n    }\n</code></pre>\n",
  "link": "/en-us/docs/soul/dev-plugin.html",
  "meta": {
    "title": "plugins",
    "keywords": "soul",
    "description": "plugins"
  }
}
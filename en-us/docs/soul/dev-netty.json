{
  "filename": "dev-netty.md",
  "__html": "<h2>description</h2>\n<ul>\n<li>This doc shows how to do performance optimization for soul.</li>\n</ul>\n<h2>time consumption</h2>\n<ul>\n<li>Soul is JVM driven and processing time for a single request is nearly between 1 - 3 ms.</li>\n</ul>\n<h2>netty optimization</h2>\n<ul>\n<li>\n<p><code>spring-webflux</code> is one of dependencies of soul, and it uses Netty in lower layer.</p>\n</li>\n<li>\n<p>The demo down below demonstrates tuning soul by customizing params in Netty.</p>\n</li>\n</ul>\n<pre><code class=\"language-java\">   <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> NettyReactiveWebServerFactory <span class=\"hljs-title\">nettyReactiveWebServerFactory</span><span class=\"hljs-params\">()</span> </span>{\n        NettyReactiveWebServerFactory webServerFactory = <span class=\"hljs-keyword\">new</span> NettyReactiveWebServerFactory();\n        webServerFactory.addServerCustomizers(<span class=\"hljs-keyword\">new</span> EventLoopNettyCustomizer());\n        <span class=\"hljs-keyword\">return</span> webServerFactory;\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EventLoopNettyCustomizer</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">NettyServerCustomizer</span> </span>{\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> HttpServer <span class=\"hljs-title\">apply</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> HttpServer httpServer)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> httpServer\n                    .tcpConfiguration(tcpServer -&gt; tcpServer\n                            .runOn(LoopResources.create(<span class=\"hljs-string\">\"soul-netty\"</span>, <span class=\"hljs-number\">1</span>, DEFAULT_IO_WORKER_COUNT, <span class=\"hljs-keyword\">true</span>), <span class=\"hljs-keyword\">false</span>)\n                            .selectorOption(ChannelOption.SO_REUSEADDR, <span class=\"hljs-keyword\">true</span>)\n                            .selectorOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)\n                            .option(ChannelOption.TCP_NODELAY, <span class=\"hljs-keyword\">true</span>)\n                            .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT));\n        }\n    }\n</code></pre>\n<ul>\n<li>\n<p>Soul-bootstrap offers this class, you may modify it when benchmarking your app if necessary.</p>\n</li>\n<li>\n<p>You can get references of business thread model from <a href=\"docs/en-us/soul/dev-thread.md\">thread model</a></p>\n</li>\n</ul>\n",
  "link": "\\en-us\\docs\\soul\\dev-netty.html",
  "meta": {
    "title": "performance optimization for soul",
    "keywords": "soul",
    "description": "performance optimization for soul"
  }
}
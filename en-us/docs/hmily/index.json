{
  "filename": "index.md",
  "__html": "<h1>What's Hmilyï¼Ÿ</h1>\n<p>Hmily is a high-performance, zero penetration, financial-level distributed transactions solution. At present, it mainly provides support for flexible transactions, including <code>TCC</code>, <code>TAC</code> (in which, it will automatically generate rollback SQL) schemes, and <code>XA</code> and more schemes will be supported in the future.</p>\n<p><img src=\"https://yu199195.github.io/images/hmily/hmily.png\" alt=\"\"></p>\n<h1>Features</h1>\n<ul>\n<li>\n<p>High reliability : It supports abnormal transaction rollback and transaction overtime abnormal recovery to prevent transaction suspension in distributed scenarios.</p>\n</li>\n<li>\n<p>Ease of use : It provides zero penetration <code>Spring-Boot</code> and <code>Spring-Namespace</code> schemes to integrate with business systems quickly.</p>\n</li>\n<li>\n<p>High performance : Decentralized design, fully integrated with business systems, and naturally supports cluster deployment.</p>\n</li>\n<li>\n<p>Observability : Performance monitoring of multiple metrics will be collected by Metrics, performance metrics is able to display in admin management system.</p>\n</li>\n<li>\n<p>Multiple RPC Framework support : It supports well-known RPC frameworks such as <code>Dubbo</code>, <code>SpringCloud</code>, <code>Motan</code>, <code>brpc</code>, <code>tars</code>, etc.</p>\n</li>\n<li>\n<p>Multiple log store medium support : It supports many mediums as log store, such as <code>mysql</code>, <code>oracle</code>, <code>mongodb</code>, <code>redis</code>, <code>zookeeper</code>, etc.</p>\n</li>\n<li>\n<p>Complex business scene : It supports transaction around nested RPC calls.</p>\n</li>\n</ul>\n<h1>Requirements</h1>\n<ul>\n<li>\n<p>The <code>JDK</code> version must be <code>JDK8</code> or later.</p>\n</li>\n<li>\n<p>In <code>TCC</code> mode, you must use a <code>RPC</code> framework, such as: <code>Dubbo</code>, <code>SpringCloud</code>, <code>Motan</code></p>\n</li>\n<li>\n<p>In <code>TAC</code> mode, you must use relational databases, such as: <code>mysql</code>, <code>oracle</code>, <code>sqlsever</code></p>\n</li>\n</ul>\n<h1>TCC Mode</h1>\n<p><img src=\"https://yu199195.github.io/images/hmily/hmily-tcc.png\" alt=\"\"></p>\n<p>When using the <code>TCC</code> mode, you should provide three methods: <code>try</code>, <code>confirm</code>, and <code>cancel</code> according to your business requirements,\nand the <code>confirm</code> and <code>cancel</code> methods should be implemented by yourselves, the framework is only responsible for calling them to achieve transaction consistency.</p>\n<h1>TAC Mode</h1>\n<p><img src=\"https://yu199195.github.io/images/hmily/hmily-tac.png\" alt=\"\"></p>\n<p>When using the <code>TAC</code> mode, you must use a relational database for business operations, and the framework will automatically generate a <code>rollback SQL</code>.\nWhen the business is abnormal, the <code>rollback SQL</code> will be executed to achieve transaction consistency</p>\n<h1>About</h1>\n<p>Hmily is a flexible distributed transaction solution that provides <code>TCC</code> and <code>TAC</code> modes.</p>\n<p>It can be easily integrated by business with zero intrusion and rapid integration.</p>\n<p>In terms of performance, log storage is asynchronous (optional) and uses asynchronous execution, without sacrificing business methods.</p>\n<p>It was previously developed by myself personally, and it is currently restarted at JD Digital Technique Group, and it will become JD Digital Technique Group's distributed transaction\nsolution in the future.</p>\n<h1>Support</h1>\n<ul>\n<li>\n<h3>If you have any questions, please join the QQ group for discussion</h3>\n<p><img src=\"https://yu199195.github.io/images/qq.png\" alt=\"\"></p>\n</li>\n<li>\n<h3>WeChat public account</h3>\n<p><img src=\"https://yu199195.github.io/images/public.jpg\" alt=\"\"></p>\n</li>\n</ul>\n",
  "link": "\\en-us\\docs\\hmily\\index.html",
  "meta": {}
}
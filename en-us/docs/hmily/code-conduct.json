{
  "filename": "code-conduct.md",
  "__html": "<h2>Development Guidelines</h2>\n<ul>\n<li><strong>Intentions</strong> Write codes with heart. Pursue clean, simplified and extremely elegant codes.</li>\n<li><strong>Readable</strong> The code is unambiguous, and the intention of the code is revealed through reading rather than debugging.</li>\n<li><strong>Tidy</strong> Agree with concepts in &lt;Refactoring: Improving the Design of Existing Code&gt; and <Clean Code: A Handbook of Agile Software Craftsmanship>.</li>\n<li><strong>Consistent</strong> Be familiar with codes already had, to keep consistent with the style and use.</li>\n<li><strong>Simplified</strong> Express meaning with the least code. Highly reusable, no duplicated codes or configurations. Delete codes out of use in time.</li>\n<li><strong>Abstract</strong> The levels are clearly divided and the concepts are reasonably refined. Keep methods, classes, packages and modules at the same abstract level.</li>\n</ul>\n<h2>Contributor Covenant Submitting of Conduct</h2>\n<ul>\n<li>Make sure all the test cases are passed, Make sure <code>./mvnw clean install</code> can be compiled and tested successfully.</li>\n<li>Make sure the test coverage rate is not lower than the master branch.</li>\n<li>Make sure to check codes with Checkstyle. codes that violate check rules should have special reasons. Find checkstyle template from <code>https://github.com/dromara/hmily/blob/master/script/hmily_checkstyle.xml</code>, please use checkstyle 8.8 to run the rules.</li>\n<li>Careful consideration for each pull request; Small and frequent pull request with complete unit function is welcomed.</li>\n<li>Conform to Contributor Covenant Code of Conduct below.</li>\n</ul>\n<h2>Contributor Covenant Code of Conduct</h2>\n<ul>\n<li>Use linux line separators.</li>\n<li>Keep indents (including blank lines) consistent with the previous one.</li>\n<li>Keep one blank line after class definition.</li>\n<li>No meaningless blank lines. Please extract private methods to instead of blank lines if too long method body or different logic code fragments.</li>\n<li>Use meaningful class, method and variable names, avoid to use abbreviate.</li>\n<li>Return values are named with <code>result</code>; Variables in the loop structure are named with each; Replace each with entry in map.</li>\n<li>Name property files with <code>Spinal Case</code>(a variant of <code>Snake Case</code> which uses hyphens <code>-</code> to separate words).</li>\n<li>Split codes that need to add notes with it into small methods, which are explained with method names.</li>\n<li>Have constants on the left and variable on the right in <code>==</code> and <code>equals</code> conditional expressions; Have variable on the left and constants on the right in <code>greater than</code> and <code>less than</code> conditional expressions.</li>\n<li>Beside using same names as input parameters and global fields in assign statement, avoid using <code>this</code> modifier.</li>\n<li>Design class as final class except abstract class for extend.</li>\n<li>Make nested loop structures a new method.</li>\n<li>The order of definition of member variables and the order of parameter passing are kept consistent in each class and method.</li>\n<li>Order of members definition and parameters should be consistent during classes and methods.</li>\n<li>Use guard clauses in priority.</li>\n<li>Minimize the access permission for classes and methods.</li>\n<li>Private method should be just next to the method in which it is used; writing private methods should be in the same as the appearance order of private methods.</li>\n<li>No null parameters or return values.</li>\n<li>Replace <code>if</code> <code>else</code> return and assign statement with ternary operator in priority.</li>\n<li>Use <code>LinkedList</code> in priority. Use <code>ArrayList</code> for use index to get element only.</li>\n<li>Use capacity based Collection such as <code>ArrayList</code>, <code>HashMap</code> must indicate initial capacity to avoid recalculate capacity.</li>\n<li>Use English in all the logs and javadoc.</li>\n<li>Include Javadoc, todo and fixme only in the comments.</li>\n<li>Only public classes and methods need javadoc, other methods, classes and override methods do not need javadoc.</li>\n</ul>\n",
  "link": "/en-us/docs/hmily/code-conduct.html",
  "meta": {
    "title": "Hmily-code-conduct",
    "keywords": "Hmily-code-conduct",
    "description": "hmily development guidelines"
  }
}
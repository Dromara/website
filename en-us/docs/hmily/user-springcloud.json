{
  "filename": "user-springcloud.md",
  "__html": "<h1>Spring-Cloud User Guide</h1>\n<ul>\n<li>\n<p>Step 1: Introduce the jar packages</p>\n</li>\n<li>\n<p>Step 2: Introduce the <code>Hmily</code> configuration</p>\n</li>\n<li>\n<p>Step 3: Add <code>@HmilyTCC</code> or <code>@HmilyTAC</code> annotation on the concrete implementation method(Service provider).</p>\n</li>\n<li>\n<p>Step 4: Add <code>@Hmily</code> annotation on the feignClient call method(Consumer side).</p>\n</li>\n</ul>\n<h2>1.Introduce The Maven dependency</h2>\n<h4>Spring-Namespace</h4>\n<ul>\n<li>Introduce the <code>hmily-springcloud</code> dependency</li>\n</ul>\n<pre><code class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hmily-springcloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>{last.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<ul>\n<li>make the configuration in the XML configuration file as below:</li>\n</ul>\n<pre><code class=\"language-xml\">    <span class=\"hljs-comment\">&lt;!--Configure the base packages that the Hmily framework need to scan --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">\"org.dromara.hmily.*\"</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- set up to enable the aspectj-autoproxy --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspectj-autoproxy</span> <span class=\"hljs-attr\">expose-proxy</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- Configure the bean parameters for Hmily startup --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"hmilyApplicationContextAware\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.dromara.hmily.spring.HmilyApplicationContextAware\"</span>/&gt;</span>\n</code></pre>\n<h4>Spring-Boot-Starter</h4>\n<ul>\n<li>Introduce the <code>hmily-spring-boot-starter-springcloud</code> dependency</li>\n</ul>\n<pre><code class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hmily-spring-boot-starter-springcloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>{last.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<h2>2.Introduce the <code>Hmily</code> configuration</h2>\n<ul>\n<li>\n<p>new a configuration file named <code>hmily.yml</code> under the <code>resource</code> directory of the current project</p>\n</li>\n<li>\n<p>the specific parameter configuration can refer to <a href=\"config_en.md\">configuration detail</a>,<a href=\"config-local_en.md\">Local configuration mode</a>, <a href=\"config-zookeeper_en.md\">Zookeeper configuration mode</a>, <a href=\"config-nacos_en.md\">nacos configuration mode</a>,<a href=\"config-apollo_en.md\">apollo configuration mode</a></p>\n</li>\n</ul>\n<h2>3. Add annotations on the service implementation method</h2>\n<h4>TCC Mode</h4>\n<ul>\n<li>\n<p>Add <code>@HmilyTCC (confirmMethod = &quot;confirm&quot;, cancelMethod = &quot;cancel&quot;)</code> annotation to the concrete implementation of the interface method identified by '@Hmily'.</p>\n</li>\n<li>\n<p><code>confirmMethod</code> : the method name for confirm，The method parameter list and return type should be consistent with the identification method.</p>\n</li>\n<li>\n<p><code>cancelMethod</code> :  the method for cancel，The method parameter list and return type should be consistent with the identification method.</p>\n</li>\n<li>\n<p>The <code>TCC</code> mode should ensure the idempotence of the <code>confirm</code> and <code>cancel</code> methods,Users need to develop these two methods by themselves,The confirmation and rollback behavior of all transactions are completely up tp users.The Hmily framework is just responsible for making calls.</p>\n</li>\n</ul>\n<pre><code class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">HelloService</span>  </span>{\n\n    <span class=\"hljs-meta\">@HmilyTCC</span>(confirmMethod = <span class=\"hljs-string\">\"sayConfrim\"</span>, cancelMethod = <span class=\"hljs-string\">\"sayCancel\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">say</span><span class=\"hljs-params\">(String hello)</span> </span>{\n         System.out.println(<span class=\"hljs-string\">\"hello world\"</span>);\n    }\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayConfrim</span><span class=\"hljs-params\">(String hello)</span> </span>{\n         System.out.println(<span class=\"hljs-string\">\" confirm hello world\"</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayCancel</span><span class=\"hljs-params\">(String hello)</span> </span>{\n         System.out.println(<span class=\"hljs-string\">\" cancel hello world\"</span>);\n    }\n}\n</code></pre>\n<h3>TAC Mode(Under development, not released)</h3>\n<ul>\n<li>Add <code>@HmilyTAC</code> annotation to the concrete implementation of the interface method identified by '@Hmily'.</li>\n</ul>\n<h2>Service Consumer(FeignClient)</h2>\n<ul>\n<li>Add the <code>@Hmily</code> annotation on the service caller's interface methods.</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@FeignClient</span>(value = <span class=\"hljs-string\">\"helle-service\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">HelloService</span> </span>{\n\n    <span class=\"hljs-meta\">@Hmily</span>\n    <span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"/helle-service/sayHello\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">say</span><span class=\"hljs-params\">(String hello)</span></span>;\n}\n\n</code></pre>\n<h2>Important Notes</h2>\n<p>Before invoking any RPC calls, when you need to aggregate RPC calls to be a distributed transaction, you need to add an annotation to the method of aggregate RPC calls which means to enable a global transaction.</p>\n<h4>负载均衡</h4>\n<h4>Load balance</h4>\n<ul>\n<li>If the service is deployed with several nodes, the load balance algorithm is better to use <code>hmily</code>, so that the calls of <code>try</code>, <code>confirm</code>, and <code>cancel</code> will fall on the same node to make full use of the cache and improve efficiency. make the configuration in your yml file as below:</li>\n</ul>\n<pre><code class=\"language-yaml\">\n<span class=\"hljs-string\">hmily.ribbon.rule.enabled</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-literal\">true</span>\n\n</code></pre>\n<h4>Enable the Hystrix</h4>\n<ul>\n<li>If the user have configured <code>feign.hystrix.enabled = true</code>, the thread pool pattern is used by default, and then the <code>HmilyHystrixConcurrencyStrategy</code> Strategy will be enabled.When the Hystrix uses the thread pool pattern, it can still pass parameters through 'threadLoacl' in RPC call.</li>\n</ul>\n<h4>Set up to never try</h4>\n<ul>\n<li>The callers of SpringCloud microservices that require distributed transactions need to be set up to never retry, there is a reference example as shown below:</li>\n</ul>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">ribbon:</span>\n    <span class=\"hljs-attr\">MaxAutoRetriesNextServer :</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-attr\">MaxAutoRetries:</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<h4>Exception</h4>\n<ul>\n<li>Do not catch any exceptions of the <code>try</code>, <code>confirm</code>, <code>cancel</code> method by yourself. Any exceptions should be thrown to the Hmily framework to handle.</li>\n</ul>\n",
  "link": "\\en-us\\docs\\hmily\\user-springcloud.html",
  "meta": {
    "title": "Spring Cloud User Guide",
    "keywords": "Spring Cloud",
    "description": "Hmily-Spring Cloud Distributed Transaction User Guide"
  }
}
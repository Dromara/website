{
  "filename": "dev-plugin.md",
  "__html": "<h2>说明</h2>\n<ul>\n<li>\n<p>插件是 soul 网关的核心执行者，每个插件在开启的情况下，都会对匹配的流量，进行自己的处理。</p>\n</li>\n<li>\n<p>在soul 网关里面，插件其实分为2 类：</p>\n<ul>\n<li>\n<p>一类是单一职责的调用链，不能对流量进行自定义的筛选。</p>\n</li>\n<li>\n<p>另一类，能对匹配的流量，执行自己的职责调用链。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>用户可以参考 soul-plugin 模块，新增自己的插件处理，如果有好的公用插件，请把代码提交上来。</p>\n</li>\n</ul>\n<h2>单一职责插件</h2>\n<ul>\n<li>引入如下依赖 :</li>\n</ul>\n<pre><code> &lt;dependency&gt;\n        &lt;groupId&gt;org.dromara&lt;/groupId&gt;\n        &lt;artifactId&gt;soul-plugin-api&lt;/artifactId&gt;\n        &lt;version&gt;${last.version}&lt;/version&gt;\n  &lt;/dependency&gt;\n</code></pre>\n<ul>\n<li>用户新增一个类 A,直接实现 <code>org.dromara.soul.plugin.api.SoulPlugin</code></li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">SoulPlugin</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * Process the Web request and (optionally) delegate to the next\n     * {<span class=\"hljs-doctag\">@code</span> WebFilter} through the given {<span class=\"hljs-doctag\">@link</span> SoulPluginChain}.\n     *\n     * <span class=\"hljs-doctag\">@param</span> exchange the current server exchange\n     * <span class=\"hljs-doctag\">@param</span> chain    provides a way to delegate to the next filter\n     * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> Mono&lt;Void&gt;} to indicate when request processing is complete\n     */</span>\n    <span class=\"hljs-function\">Mono&lt;Void&gt; <span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(ServerWebExchange exchange, SoulPluginChain chain)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * return plugin order .\n     * This attribute To determine the plugin execution order in the same type plugin.\n     *\n     * <span class=\"hljs-doctag\">@return</span> int order\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getOrder</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * acquire plugin name.\n     * this is plugin name define you must Provide the right name.\n     * if you impl AbstractSoulPlugin this attribute not use.\n     *\n     * <span class=\"hljs-doctag\">@return</span> plugin name.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> String <span class=\"hljs-title\">named</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * plugin is execute.\n     * if return true this plugin can not execute.\n     *\n     * <span class=\"hljs-doctag\">@param</span> exchange the current server exchange\n     * <span class=\"hljs-doctag\">@return</span> default false.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> Boolean <span class=\"hljs-title\">skip</span><span class=\"hljs-params\">(ServerWebExchange exchange)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n    }\n}\n\n</code></pre>\n<ul>\n<li>\n<p>接口方法详细说明</p>\n<ul>\n<li>\n<p><code>execute()</code> 方法为核心的执行方法，用户可以在里面自由的实现自己想要的功能。</p>\n</li>\n<li>\n<p><code>getOrder()</code> 指定插件的排序。</p>\n</li>\n<li>\n<p><code>named()</code> 指定插件的名称。</p>\n</li>\n<li>\n<p><code>skip()</code> 在特定的条件下，该插件是否被跳过。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>注册成Spring的bean，参考如下,或者直接在实现类上加 <code>@Component</code> 注解。</p>\n</li>\n</ul>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SoulPlugin <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> A();\n    }\n</code></pre>\n<h2>匹配流量处理插件</h2>\n<ul>\n<li>引入如下依赖 :</li>\n</ul>\n<pre><code class=\"language-xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>soul-plugin-base<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${last.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<ul>\n<li>\n<p>新增一个类A，继承 <code>org.dromara.soul.plugin.base.AbstractSoulPlugin</code></p>\n</li>\n<li>\n<p>以下是参考 ：</p>\n</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * This is your custom plugin.\n * He is running in after before plugin, implement your own functionality.\n * extends AbstractSoulPlugin so you must user soul-admin And add related plug-in development.\n *\n * <span class=\"hljs-doctag\">@author</span> xiaoyu(Myth)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CustomPlugin</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractSoulPlugin</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * return plugin order .\n     * The same plugin he executes in the same order.\n     *\n     * <span class=\"hljs-doctag\">@return</span> int\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getOrder</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * acquire plugin name.\n     * return you custom plugin name.\n     * It must be the same name as the plug-in you added in the admin background.\n     *\n     * <span class=\"hljs-doctag\">@return</span> plugin name.\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">named</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"soul\"</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * plugin is execute.\n     * Do I need to skip.\n     * if you need skip return true.\n     *\n     * <span class=\"hljs-doctag\">@param</span> exchange the current server exchange\n     * <span class=\"hljs-doctag\">@return</span> default false.\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Boolean <span class=\"hljs-title\">skip</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> Mono&lt;Void&gt; <span class=\"hljs-title\">doExecute</span><span class=\"hljs-params\">(ServerWebExchange exchange, SoulPluginChain chain, SelectorZkDTO selector, RuleZkDTO rule)</span> </span>{\n        LOGGER.debug(<span class=\"hljs-string\">\".......... function plugin start..............\"</span>);\n        <span class=\"hljs-comment\">/*\n         * Processing after your selector matches the rule.\n         * rule.getHandle() is you Customize the json string to be processed.\n         * for this example.\n         * Convert your custom json string pass to an entity class.\n         */</span>\n        <span class=\"hljs-keyword\">final</span> String ruleHandle = rule.getHandle();\n\n        <span class=\"hljs-keyword\">final</span> Test test = GsonUtils.getInstance().fromJson(ruleHandle, Test<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n\n        <span class=\"hljs-comment\">/*\n         * Then do your own business processing.\n         * The last execution  chain.execute(exchange).\n         * Let it continue on the chain until the end.\n         */</span>\n        System.out.println(test.toString());\n        <span class=\"hljs-keyword\">return</span> chain.execute(exchange);\n    }\n}\n\n</code></pre>\n<ul>\n<li>\n<p>详细讲解 ：</p>\n<ul>\n<li>\n<p>继承该类的插件，插件会进行选择器规则匹配，那如何来设置呢？</p>\n</li>\n<li>\n<p>首先在 <code>soul-admin</code> 后台 --&gt;插件管理中，新增一个插件，注意 名称与 你自定义插件的 <code>named()</code> 方法要一致。</p>\n</li>\n<li>\n<p>重新登陆  <code>soul-admin</code> 后台 ，你会发现在插件列表就多了一个你刚新增的插件，你就可以进行选择器规则匹配</p>\n</li>\n<li>\n<p>在规则中，有个 <code>handler</code> 字段，是你自定义处理数据，在 <code>doExecute()</code> 方法中，通过 <code>final String ruleHandle = rule.getHandle();</code> 获取，然后进行你的操作。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>注册成Spring的bean，参考如下,或者直接在实现类上加 <code>@Component</code> 注解。</p>\n</li>\n</ul>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SoulPlugin <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> A();\n    }\n</code></pre>\n<h2>订阅你的插件数据，进行自定义的处理</h2>\n<ul>\n<li>新增一个类A，实现 <code>org.dromara.soul.plugin.base.handler.PluginDataHandler</code></li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">PluginDataHandler</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * Handler plugin.\n     *\n     * <span class=\"hljs-doctag\">@param</span> pluginData the plugin data\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handlerPlugin</span><span class=\"hljs-params\">(PluginData pluginData)</span> </span>{\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Remove plugin.\n     *\n     * <span class=\"hljs-doctag\">@param</span> pluginData the plugin data\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removePlugin</span><span class=\"hljs-params\">(PluginData pluginData)</span> </span>{\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Handler selector.\n     *\n     * <span class=\"hljs-doctag\">@param</span> selectorData the selector data\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handlerSelector</span><span class=\"hljs-params\">(SelectorData selectorData)</span> </span>{\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Remove selector.\n     *\n     * <span class=\"hljs-doctag\">@param</span> selectorData the selector data\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeSelector</span><span class=\"hljs-params\">(SelectorData selectorData)</span> </span>{\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Handler rule.\n     *\n     * <span class=\"hljs-doctag\">@param</span> ruleData the rule data\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handlerRule</span><span class=\"hljs-params\">(RuleData ruleData)</span> </span>{\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Remove rule.\n     *\n     * <span class=\"hljs-doctag\">@param</span> ruleData the rule data\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeRule</span><span class=\"hljs-params\">(RuleData ruleData)</span> </span>{\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Plugin named string.\n     *\n     * <span class=\"hljs-doctag\">@return</span> the string\n     */</span>\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">pluginNamed</span><span class=\"hljs-params\">()</span></span>;\n\n}\n</code></pre>\n<ul>\n<li>\n<p>注意 <code>pluginNamed()</code> 要和你自定义的插件名称相同。</p>\n</li>\n<li>\n<p>注册成Spring的bean，参考如下,或者直接在实现类上加 <code>@Component</code> 注解。</p>\n</li>\n</ul>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> PluginDataHandler <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> A();\n    }\n</code></pre>\n",
  "link": "\\zh-cn\\docs\\soul\\dev-plugin.html",
  "meta": {
    "title": "插件扩展",
    "keywords": "soul",
    "description": "插件扩展"
  }
}
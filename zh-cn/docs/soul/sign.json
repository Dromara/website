{
  "filename": "sign.md",
  "__html": "<h2>插件设置</h2>\n<ul>\n<li>在管理后台-&gt;插件管理中，把sign插件设置为开启</li>\n</ul>\n<h2>新增 AK/SK</h2>\n<ul>\n<li>\n<p>在认证管理中，点击新增，新增一条 AK/SK</p>\n</li>\n<li>\n<p>在新版本中，新增了一个AK/SK 所对应多少个注册到网关的接口的配置.</p>\n</li>\n</ul>\n<h2>网关技术实现</h2>\n<ul>\n<li>采用Ak/SK鉴权技术方案</li>\n<li>采用鉴权插件，责任链的模式的模式来完成.</li>\n<li>当鉴权插件开启，并配置所有接口鉴权时候生效。</li>\n</ul>\n<h2>鉴权使用指南</h2>\n<ul>\n<li>\n<p>第一步：AK/SK由网关来进行分配. 比如分配给你的AK为: <code>1TEST123456781</code>  \tSK为：<code>506EEB535CF740D7A755CB4B9F4A1536</code></p>\n</li>\n<li>\n<p>第一步：确定好你要访问的网关路径 比如 <code>/api/service/abc</code></p>\n</li>\n<li>\n<p>第三步:构造参数（以下是通用参数）</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th style=\"text-align:right\">值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>timestamp</td>\n<td style=\"text-align:right\">当前时间戳(String类型)</td>\n<td style=\"text-align:center\">当前时间的毫秒数（网关会过滤掉5分钟之前的请求）</td>\n</tr>\n<tr>\n<td>path</td>\n<td style=\"text-align:right\">/api/service/abc</td>\n<td style=\"text-align:center\">就是你需要访问的接口路径(根据你访问网关接口自己变更)</td>\n</tr>\n<tr>\n<td>version</td>\n<td style=\"text-align:right\">1.0.0</td>\n<td style=\"text-align:center\">目前定位1.0.0 写死，String类型</td>\n</tr>\n</tbody>\n</table>\n<p>对上述2个字段进行key的自然排序，然后进行字段与字段值拼接最后再拼接上SK,代码示例。</p>\n<pre><code>第一步:首先构造一个Map \n\n   Map&lt;String, String&gt; map = Maps.newHashMapWithExpectedSize(2);\n   //timestamp为毫秒数的字符串形式 String.valueOf(LocalDateTime.now().toInstant(ZoneOffset.of(&quot;+8&quot;)).toEpochMilli()) \n   map.put(&quot;timestamp&quot;,&quot;1571711067186&quot;);  //值应该为毫秒数的字符串形式 \n   map.put(&quot;path&quot;, &quot;/api/service/abc&quot;);\n   map.put(&quot;version&quot;, &quot;1.0.0&quot;);\n\n第二步:进行Key的自然排序，然后Key，Value值拼接最后再拼接分配给你的Sk\n\nList&lt;String&gt; storedKeys = Arrays.stream(map.keySet()\n                .toArray(new String[]{}))\n                .sorted(Comparator.naturalOrder())\n                .collect(Collectors.toList());\nfinal String sign = storedKeys.stream()\n                .map(key -&gt; String.join(&quot;&quot;, key, params.get(key)))\n                .collect(Collectors.joining()).trim()\n                .concat(&quot;506EEB535CF740D7A755CB4B9F4A1536&quot;);\n\n你得到的sign值应该为:path/api/service/abctimestamp1571711067186version1.0.0506EEB535CF740D7A755CB4B9F4A1536\n\n第三步:进行Md5加密后转成大写\n\nDigestUtils.md5DigestAsHex(sign.getBytes()).toUpperCase()\n\n最后得到的值为:A021BF82BE342668B78CD9ADE593D683\n</code></pre>\n<h2>请求网关</h2>\n<ul>\n<li>\n<p>假如你访问的路径为 :/api/service/abc</p>\n</li>\n<li>\n<p>访问地址 ：http:网关的域名/api/service/abc</p>\n</li>\n<li>\n<p>设置<code>header</code>头，<code>header</code>头参数为：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th style=\"text-align:right\">值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>timestamp</td>\n<td style=\"text-align:right\"><code>1571711067186</code></td>\n<td style=\"text-align:center\">上述你进行签名的时候使用的时间值</td>\n</tr>\n<tr>\n<td>appKey</td>\n<td style=\"text-align:right\"><code>1TEST123456781</code></td>\n<td style=\"text-align:center\">分配给你的Ak值</td>\n</tr>\n<tr>\n<td>sign</td>\n<td style=\"text-align:right\"><code>A90E66763793BDBC817CF3B52AAAC041</code></td>\n<td style=\"text-align:center\">上述得到的签名值</td>\n</tr>\n<tr>\n<td>version</td>\n<td style=\"text-align:right\"><code>1.0.0</code></td>\n<td style=\"text-align:center\">写死，就为这个值</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>签名插件会默认过滤5分钟之后的请求</li>\n</ul>\n<h2>如果认证不通过会返回 code 为401 message可能会有变动。</h2>\n<pre><code class=\"language-json\">\"code\":401,\"message\":\"sign is not pass,Please check you sign algorithm!\",\"data\":null}\n</code></pre>\n<h2>插件扩展</h2>\n<ul>\n<li>请参考开发者文档中的 自定义sign插件实现.</li>\n</ul>\n",
  "link": "\\zh-cn\\docs\\soul\\sign.html",
  "meta": {
    "title": "sign插件",
    "keywords": "sign",
    "description": "sign插件"
  }
}
{
  "filename": "extend.md",
  "__html": "<ul>\n<li>\n<p>soul 提供了扩展demo 项目是<a href=\"https://github.com/Dromara/soul/tree/master/soul-extend-demo\">soul-extend-demo</a></p>\n</li>\n<li>\n<p>soul 提供了2种方式的扩展：</p>\n</li>\n<li>\n<p>第一种是实现 SoulPlugin接口：</p>\n</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.dromara.soul.web.plugin;\n\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.enums.PluginTypeEnum;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.server.ServerWebExchange;\n<span class=\"hljs-keyword\">import</span> reactor.core.publisher.Mono;\n\n<span class=\"hljs-comment\">/**\n * the soul plugin interface.\n *\n * <span class=\"hljs-doctag\">@author</span> xiaoyu\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">SoulPlugin</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * Process the Web request and (optionally) delegate to the next\n     * {<span class=\"hljs-doctag\">@code</span> WebFilter} through the given {<span class=\"hljs-doctag\">@link</span> SoulPluginChain}.\n     *\n     * <span class=\"hljs-doctag\">@param</span> exchange the current server exchange\n     * <span class=\"hljs-doctag\">@param</span> chain    provides a way to delegate to the next filter\n     * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> Mono&lt;Void&gt;} to indicate when request processing is complete\n     */</span>\n    <span class=\"hljs-function\">Mono&lt;Void&gt; <span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(ServerWebExchange exchange, SoulPluginChain chain)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * return plugin type.\n     * the plugin execution order\n     * before type The first to perform then Function Type ,then last type.\n     *\n     * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@linkplain</span> PluginTypeEnum}\n     */</span>\n    <span class=\"hljs-function\">PluginTypeEnum <span class=\"hljs-title\">pluginType</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * return plugin order .\n     * This attribute To determine the plugin execution order in the same type plugin.\n     *\n     * <span class=\"hljs-doctag\">@return</span> int order\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getOrder</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * acquire plugin name.\n     * this is plugin name define  if you extend {<span class=\"hljs-doctag\">@linkplain</span> AbstractSoulPlugin } you must Provide the right name.\n     * if you impl AbstractSoulPlugin this attribute not use.\n     *\n     * <span class=\"hljs-doctag\">@return</span> plugin name.\n     */</span>\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">named</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * plugin is execute.\n     * if return true this plugin can not execute.\n     *\n     * <span class=\"hljs-doctag\">@param</span> exchange the current server exchange\n     * <span class=\"hljs-doctag\">@return</span> default false.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> Boolean <span class=\"hljs-title\">skip</span><span class=\"hljs-params\">(ServerWebExchange exchange)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n    }\n\n</code></pre>\n<ul>\n<li>plugnType():是表示该插件的执行顺序与功能，BEFORE是最开始执行，Function 是中间，Last是最后执行。方便使用与扩展。</li>\n<li>getOrder():是指同一种类型插件执行时候的先后顺序。</li>\n<li>named()：插件命名。</li>\n<li>skip(): 该插件是否需要跳过，默认不跳过。</li>\n<li>execute():插件执行的链条，会传递到下一个插件，责任链模式了解一下。</li>\n</ul>\n<h3>如果是实现SoulPlugin的话，只需要将你的实现类声明为Spring的bean就行。</h3>\n<ul>\n<li>第二种是继承AbstractSoulPlugin插件,这种就比较困难了，您需要开发后台插件来实现你自己想要功能</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/*\n *\n *  * Licensed to the Apache Software Foundation (ASF) under one or more\n *  * contributor license agreements.  See the NOTICE file distributed with\n *  * this work for additional information regarding copyright ownership.\n *  * The ASF licenses this file to You under the Apache License, Version 2.0\n *  * (the \"License\"); you may not use this file except in compliance with\n *  * the License.  You may obtain a copy of the License at\n *  *\n *  *     http://www.apache.org/licenses/LICENSE-2.0\n *  *\n *  * Unless required by applicable law or agreed to in writing, software\n *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  * See the License for the specific language governing permissions and\n *  * limitations under the License.\n *\n */</span>\n\n<span class=\"hljs-keyword\">package</span> org.dromara.soul.web.plugin;\n\n<span class=\"hljs-keyword\">import</span> lombok.RequiredArgsConstructor;\n<span class=\"hljs-keyword\">import</span> org.apache.commons.collections4.CollectionUtils;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.constant.Constants;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.dto.zk.PluginZkDTO;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.dto.zk.RuleZkDTO;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.dto.zk.SelectorZkDTO;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.enums.PluginEnum;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.enums.SelectorTypeEnum;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.result.SoulResult;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.utils.JSONUtils;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.utils.LogUtils;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.web.cache.ZookeeperCacheManager;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.web.condition.strategy.MatchStrategyFactory;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.web.request.RequestDTO;\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.http.HttpStatus;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.server.ServerWebExchange;\n<span class=\"hljs-keyword\">import</span> reactor.core.publisher.Mono;\n\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.Objects;\n\n\n<span class=\"hljs-comment\">/**\n * abstract soul plugin please extends.\n *\n * <span class=\"hljs-doctag\">@author</span> xiaoyu(Myth)\n */</span>\n<span class=\"hljs-meta\">@SuppressWarnings</span>(<span class=\"hljs-string\">\"unchecked\"</span>)\n<span class=\"hljs-meta\">@RequiredArgsConstructor</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AbstractSoulPlugin</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">SoulPlugin</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * logger.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(AbstractSoulPlugin.class);\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ZookeeperCacheManager zookeeperCacheManager;\n\n    <span class=\"hljs-comment\">/**\n     * this is Template Method child has Implement your own logic.\n     *\n     * <span class=\"hljs-doctag\">@param</span> exchange exchange the current server exchange {<span class=\"hljs-doctag\">@linkplain</span> ServerWebExchange}\n     * <span class=\"hljs-doctag\">@param</span> chain    chain the current chain  {<span class=\"hljs-doctag\">@linkplain</span> ServerWebExchange}\n     * <span class=\"hljs-doctag\">@param</span> rule     rule    {<span class=\"hljs-doctag\">@linkplain</span> RuleZkDTO}\n     * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> Mono&lt;Void&gt;} to indicate when request handling is complete\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> Mono&lt;Void&gt; <span class=\"hljs-title\">doExecute</span><span class=\"hljs-params\">(ServerWebExchange exchange, SoulPluginChain chain, RuleZkDTO rule)</span></span>;\n\n\n    <span class=\"hljs-comment\">/**\n     * Process the Web request and (optionally) delegate to the next\n     * {<span class=\"hljs-doctag\">@code</span> WebFilter} through the given {<span class=\"hljs-doctag\">@link</span> SoulPluginChain}.\n     *\n     * <span class=\"hljs-doctag\">@param</span> exchange the current server exchange\n     * <span class=\"hljs-doctag\">@param</span> chain    provides a way to delegate to the next filter\n     * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> Mono&lt;Void&gt;} to indicate when request processing is complete\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> SoulPluginChain chain)</span> </span>{\n        <span class=\"hljs-keyword\">final</span> PluginZkDTO redisDTO = zookeeperCacheManager.findPluginByName(named());\n        <span class=\"hljs-keyword\">if</span> (!(skip(exchange) || redisDTO == <span class=\"hljs-keyword\">null</span> || !redisDTO.getEnabled())) {\n            <span class=\"hljs-comment\">//获取selector</span>\n            <span class=\"hljs-keyword\">final</span> List&lt;SelectorZkDTO&gt; selectors = zookeeperCacheManager.findSelectorByPluginName(named());\n            <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(selectors)) {\n                <span class=\"hljs-keyword\">return</span> chain.execute(exchange);\n            }\n            RuleZkDTO rule = selectors.stream()\n                    .filter(selector -&gt; selector.getEnabled() &amp;&amp; filterSelector(selector, exchange))\n                    .findFirst()\n                    .map(selectorZkDTO -&gt; {\n                        <span class=\"hljs-comment\">//如果打印日志</span>\n                        <span class=\"hljs-keyword\">if</span> (selectorZkDTO.getLoged()) {\n                            LogUtils.info(LOGGER, named() + <span class=\"hljs-string\">\" selector success selector name :{}\"</span>, selectorZkDTO::getName);\n                        }\n                        <span class=\"hljs-keyword\">final</span> List&lt;RuleZkDTO&gt; rules =\n                                zookeeperCacheManager.findRuleBySelectorId(selectorZkDTO.getId());\n                        <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(rules)) {\n                            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n                        }\n                        <span class=\"hljs-keyword\">return</span> filterRule(exchange, rules);\n\n                    }).orElse(<span class=\"hljs-keyword\">null</span>);\n\n            <span class=\"hljs-keyword\">final</span> RequestDTO body = exchange.getAttribute(Constants.REQUESTDTO);\n\n            <span class=\"hljs-keyword\">if</span> (Objects.nonNull(rule)) {\n                <span class=\"hljs-keyword\">if</span> (rule.getLoged()) {\n                    LogUtils.info(LOGGER, () -&gt; {\n                        <span class=\"hljs-keyword\">assert</span> body != <span class=\"hljs-keyword\">null</span>;\n                        <span class=\"hljs-keyword\">return</span> body.getModule() + <span class=\"hljs-string\">\":\"</span> + body.getMethod() + <span class=\"hljs-string\">\"  match  \"</span> + named() + <span class=\"hljs-string\">\"  rule  is name :\"</span> + rule.getName();\n                    });\n                }\n                <span class=\"hljs-keyword\">return</span> doExecute(exchange, chain, rule);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">//If the divide or dubbo or spring cloud plug-in does not match, return directly</span>\n                <span class=\"hljs-keyword\">if</span> (PluginEnum.DIVIDE.getName().equals(named())\n                        || PluginEnum.DUBBO.getName().equals(named())\n                        || PluginEnum.SPRING_CLOUD.getName().equals(named())) {\n                    LogUtils.info(LOGGER, () -&gt; Objects.requireNonNull(body).getModule() + <span class=\"hljs-string\">\":\"</span> + body.getMethod() + <span class=\"hljs-string\">\" not match  \"</span> + named() + <span class=\"hljs-string\">\"  rule\"</span>);\n                    <span class=\"hljs-keyword\">final</span> SoulResult error = SoulResult.error(HttpStatus.NOT_FOUND.value(), Constants.UPSTREAM_NOT_FIND);\n                    <span class=\"hljs-keyword\">return</span> exchange.getResponse().writeWith(Mono.just(exchange.getResponse().bufferFactory().wrap(Objects.requireNonNull(JSONUtils.toJson(error)).getBytes())));\n                }\n                <span class=\"hljs-keyword\">return</span> chain.execute(exchange);\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> chain.execute(exchange);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Boolean <span class=\"hljs-title\">filterSelector</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> SelectorZkDTO selector, <span class=\"hljs-keyword\">final</span> ServerWebExchange exchange)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (selector.getType() == SelectorTypeEnum.CUSTOM_FLOW.getCode()) {\n            <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(selector.getConditionZkDTOList())) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n            }\n            <span class=\"hljs-keyword\">return</span> MatchStrategyFactory.of(selector.getMatchMode())\n                    .match(selector.getConditionZkDTOList(), exchange);\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> RuleZkDTO <span class=\"hljs-title\">filterRule</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> List&lt;RuleZkDTO&gt; rules)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> rules.stream()\n                .filter(rule -&gt; Objects.nonNull(rule) &amp;&amp; rule.getEnabled())\n                .filter((RuleZkDTO ruleZkDTO) -&gt; MatchStrategyFactory.of(ruleZkDTO.getMatchMode())\n                        .match(ruleZkDTO.getConditionZkDTOList(), exchange))\n                .findFirst().orElse(<span class=\"hljs-keyword\">null</span>);\n    }\n}\n\n</code></pre>\n<ul>\n<li>doExecute() 需要实现此抽象方法来实现你的特殊定制，当然，你还要开发admin管理后台，这个插件的具体规则是什么？难度比较高，需要对Soul比较熟悉。</li>\n</ul>\n",
  "title": "soul扩展",
  "keywords": "soul extend",
  "description": "soul扩展"
}
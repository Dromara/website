{
  "filename": "extend.md",
  "__html": "<ul>\n<li>\n<p>soul 提供了扩展demo 项目是<a href=\"https://github.com/Dromara/soul/tree/master/soul-extend-demo\">soul-extend-demo</a></p>\n</li>\n<li>\n<p>soul 提供了2种方式的扩展：</p>\n</li>\n<li>\n<p>第一种是实现 SoulPlugin接口：</p>\n</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.dromara.soul.web.plugin;\n\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.enums.PluginTypeEnum;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.server.ServerWebExchange;\n<span class=\"hljs-keyword\">import</span> reactor.core.publisher.Mono;\n\n<span class=\"hljs-comment\">/**\n * the soul plugin interface.\n *\n * <span class=\"hljs-doctag\">@author</span> xiaoyu\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">SoulPlugin</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * Process the Web request and (optionally) delegate to the next\n     * {<span class=\"hljs-doctag\">@code</span> WebFilter} through the given {<span class=\"hljs-doctag\">@link</span> SoulPluginChain}.\n     *\n     * <span class=\"hljs-doctag\">@param</span> exchange the current server exchange\n     * <span class=\"hljs-doctag\">@param</span> chain    provides a way to delegate to the next filter\n     * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> Mono&lt;Void&gt;} to indicate when request processing is complete\n     */</span>\n    <span class=\"hljs-function\">Mono&lt;Void&gt; <span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(ServerWebExchange exchange, SoulPluginChain chain)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * return plugin type.\n     * the plugin execution order\n     * before type The first to perform then Function Type ,then last type.\n     *\n     * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@linkplain</span> PluginTypeEnum}\n     */</span>\n    <span class=\"hljs-function\">PluginTypeEnum <span class=\"hljs-title\">pluginType</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * return plugin order .\n     * This attribute To determine the plugin execution order in the same type plugin.\n     *\n     * <span class=\"hljs-doctag\">@return</span> int order\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getOrder</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * acquire plugin name.\n     * this is plugin name define  if you extend {<span class=\"hljs-doctag\">@linkplain</span> AbstractSoulPlugin } you must Provide the right name.\n     * if you impl AbstractSoulPlugin this attribute not use.\n     *\n     * <span class=\"hljs-doctag\">@return</span> plugin name.\n     */</span>\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">named</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * plugin is execute.\n     * if return true this plugin can not execute.\n     *\n     * <span class=\"hljs-doctag\">@param</span> exchange the current server exchange\n     * <span class=\"hljs-doctag\">@return</span> default false.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> Boolean <span class=\"hljs-title\">skip</span><span class=\"hljs-params\">(ServerWebExchange exchange)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n    }\n\n</code></pre>\n<ul>\n<li>plugnType():是表示该插件的执行顺序与功能，BEFORE是最开始执行，Function 是中间，Last是最后执行。方便使用与扩展。</li>\n<li>getOrder():是指同一种类型插件执行时候的先后顺序。</li>\n<li>named()：插件命名。</li>\n<li>skip(): 该插件是否需要跳过，默认不跳过。</li>\n<li>execute():插件执行的链条，会传递到下一个插件，责任链模式了解一下。</li>\n</ul>\n<h3>如果是实现SoulPlugin的话，只需要将你的实现类声明为Spring的bean就行。</h3>\n<ul>\n<li>第二种是继承 <code>org.dromara.soul.web.plugin.AbstractSoulPlugin</code></li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.dromara.soul.extend.demo.custom;\n\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.dto.zk.RuleZkDTO;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.dto.zk.SelectorZkDTO;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.enums.PluginTypeEnum;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.common.utils.GsonUtils;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.extend.demo.entity.Test;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.web.cache.ZookeeperCacheManager;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.web.plugin.AbstractSoulPlugin;\n<span class=\"hljs-keyword\">import</span> org.dromara.soul.web.plugin.SoulPluginChain;\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.server.ServerWebExchange;\n<span class=\"hljs-keyword\">import</span> reactor.core.publisher.Mono;\n\n\n<span class=\"hljs-comment\">/**\n * This is your custom plugin.\n * He is running in after before plugin, implement your own functionality.\n * extends AbstractSoulPlugin so you must user soul-admin And add related plug-in development.\n *\n * <span class=\"hljs-doctag\">@author</span> xiaoyu(Myth)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CustomPlugin</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractSoulPlugin</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * logger.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(CustomPlugin.class);\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">CustomPlugin</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> ZookeeperCacheManager dataCacheManager)</span> </span>{\n        <span class=\"hljs-keyword\">super</span>(dataCacheManager);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * return plugin type.\n     * The type of plug-ins indicates their order at runtime\n     * The PluginTypeEnum.BEFORE is first\n     * The PluginTypeEnum.LAST is last.\n     *\n     * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@linkplain</span> PluginTypeEnum}\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> PluginTypeEnum <span class=\"hljs-title\">pluginType</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> PluginTypeEnum.FUNCTION;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * return plugin order .\n     * The same plugin he executes in the same order.\n     *\n     * <span class=\"hljs-doctag\">@return</span> int\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getOrder</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * acquire plugin name.\n     * return you custom plugin name.\n     * It must be the same name as the plug-in you added in the admin background.\n     *\n     * <span class=\"hljs-doctag\">@return</span> plugin name.\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">named</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"soul\"</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * plugin is execute.\n     * Do I need to skip.\n     * if you need skip return true.\n     *\n     * <span class=\"hljs-doctag\">@param</span> exchange the current server exchange\n     * <span class=\"hljs-doctag\">@return</span> default false.\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Boolean <span class=\"hljs-title\">skip</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> Mono&lt;Void&gt; <span class=\"hljs-title\">doExecute</span><span class=\"hljs-params\">(ServerWebExchange exchange, SoulPluginChain chain, SelectorZkDTO selector, RuleZkDTO rule)</span> </span>{\n        LOGGER.debug(<span class=\"hljs-string\">\".......... function plugin start..............\"</span>);\n\n        <span class=\"hljs-comment\">/*\n         * Processing after your selector matches the rule.\n         * rule.getHandle() is you Customize the json string to be processed.\n         * for this example.\n         * Convert your custom json string pass to an entity class.\n         */</span>\n        <span class=\"hljs-keyword\">final</span> String ruleHandle = rule.getHandle();\n\n        <span class=\"hljs-keyword\">final</span> Test test = GsonUtils.getInstance().fromJson(ruleHandle, Test.class);\n\n        <span class=\"hljs-comment\">/*\n         * Then do your own business processing.\n         * The last execution  chain.execute(exchange).\n         * Let it continue on the chain until the end.\n         */</span>\n\n        System.out.println(test.toString());\n\n\n        <span class=\"hljs-keyword\">return</span> chain.execute(exchange);\n    }\n}\n\n\n</code></pre>\n<ul>\n<li>\n<p>然后把自己定义的插件类注册成为Spring的bean。</p>\n</li>\n<li>\n<p>注意named() 方法返回的要与你在soul-admin后台添加的插件名称一样。</p>\n</li>\n</ul>\n",
  "title": "soul扩展",
  "keywords": "soul extend",
  "description": "soul扩展"
}
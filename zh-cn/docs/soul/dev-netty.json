{
  "filename": "dev-netty.md",
  "__html": "<h2>说明</h2>\n<ul>\n<li>本文主要介绍如果对soul进行优化</li>\n</ul>\n<h2>本身消耗</h2>\n<ul>\n<li>soul本身所有的操作，都是基于jvm内存来匹配，本身消耗时间大概在 1-3 ms左右。</li>\n</ul>\n<h2>底层netty调优</h2>\n<ul>\n<li>\n<p>soul内置依赖 <code>spring-webflux</code> 而其底层是使用的netty。这一块只要是使用的netty线程模型。</p>\n</li>\n<li>\n<p>我们可以自定义netty的相关参数来对soul 进行优化,以下是示例，</p>\n</li>\n</ul>\n<pre><code class=\"language-java\">   <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> NettyReactiveWebServerFactory <span class=\"hljs-title\">nettyReactiveWebServerFactory</span><span class=\"hljs-params\">()</span> </span>{\n        NettyReactiveWebServerFactory webServerFactory = <span class=\"hljs-keyword\">new</span> NettyReactiveWebServerFactory();\n        webServerFactory.addServerCustomizers(<span class=\"hljs-keyword\">new</span> EventLoopNettyCustomizer());\n        <span class=\"hljs-keyword\">return</span> webServerFactory;\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EventLoopNettyCustomizer</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">NettyServerCustomizer</span> </span>{\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> HttpServer <span class=\"hljs-title\">apply</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> HttpServer httpServer)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> httpServer\n                    .tcpConfiguration(tcpServer -&gt; tcpServer\n                            .runOn(LoopResources.create(<span class=\"hljs-string\">\"soul-netty\"</span>, <span class=\"hljs-number\">1</span>, DEFAULT_IO_WORKER_COUNT, <span class=\"hljs-keyword\">true</span>), <span class=\"hljs-keyword\">false</span>)\n                            .selectorOption(ChannelOption.SO_REUSEADDR, <span class=\"hljs-keyword\">true</span>)\n                            .selectorOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)\n                            .option(ChannelOption.TCP_NODELAY, <span class=\"hljs-keyword\">true</span>)\n                            .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT));\n        }\n    }\n</code></pre>\n<ul>\n<li>\n<p>这个类在 soul-bootstrap中已经内置，在压测的时候，可以根据自己的需求来进行优化设置。</p>\n</li>\n<li>\n<p>业务线程模型可以看<a href=\"dev-thread.md\">线程模型</a></p>\n</li>\n</ul>\n",
  "link": "\\zh-cn\\docs\\soul\\dev-netty.html",
  "meta": {
    "title": "soul性能优化",
    "keywords": "soul",
    "description": "soul性能优化"
  }
}
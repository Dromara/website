{
  "filename": "joinUp-dubbo.md",
  "__html": "<h2>说明</h2>\n<ul>\n<li>\n<p>此篇文章是教你如何把自己的项目中的接口，快速接入到soul网关.</p>\n</li>\n<li>\n<p>只适合springboot用户.</p>\n</li>\n<li>\n<p>接入前，请正确的启动 <code>soul-admin</code> ,<code>soul-bootstrap</code>.</p>\n</li>\n</ul>\n<h2>dubbo用户  (alibaba-dubbo ,版本小于2.7的用户)</h2>\n<ul>\n<li>引入jar包，在你的提供者服务里面</li>\n</ul>\n<pre><code> &lt;dependency&gt;\n     &lt;groupId&gt;org.dromara&lt;/groupId&gt;\n     &lt;artifactId&gt;soul-client-alibaba-dubbo&lt;/artifactId&gt;\n     &lt;version&gt;2.1.0-RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<ul>\n<li>yml配置</li>\n</ul>\n<pre><code class=\"language-yml\"><span class=\"hljs-attr\">soul:</span>\n  <span class=\"hljs-attr\">dubbo:</span>\n    <span class=\"hljs-attr\">adminUrl:</span> <span class=\"hljs-string\">http://localhost:9095</span>\n    <span class=\"hljs-attr\">contextPath:</span> <span class=\"hljs-string\">/http</span>\n    <span class=\"hljs-attr\">appName:</span> <span class=\"hljs-string\">http</span>\n\n\n<span class=\"hljs-comment\"># adminUrl: 为你启动的soul-admin 项目的ip + 端口，注意要加http://</span>\n<span class=\"hljs-comment\"># contextPath: 为你的这个mvc项目在soul网关的路由前缀，这个你应该懂意思把？ 比如/order ，/product 等等，网关会根据你的这个前缀来进行路由.</span>\n<span class=\"hljs-comment\"># appName：你的应用名称，不配置的话，会默认取 dubbo配置中application 中的名称</span>\n</code></pre>\n<ul>\n<li>在实现类上加上 <code>soulClient</code> 注解</li>\n</ul>\n<pre><code>@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\npublic @interface SoulClient {\n\n    /**\n     * 提供出去的接口路径,http路径\n     * Path string.\n     *\n     * @return the string\n     */\n    String path();\n\n    /**\n     * 接口路径描述,方便用户选择.\n     *\n     * @return String\n     */\n    String desc();\n\n    /**\n     * Enabled boolean.\n     *\n     * @return the boolean\n     */\n    boolean enabled() default true;\n</code></pre>\n<ul>\n<li>启动你的提供者,大功告成，你的dubbo接口已经发布到 soul网关.如果还有不懂的，可以参考 <code>soul-test-dubbo</code>项目.</li>\n</ul>\n<h2>dubbo用户  (apache-dubbo ,版本大于等于2.7的用户)</h2>\n<ul>\n<li>引入jar包，在你的提供者服务里面</li>\n</ul>\n<pre><code> &lt;dependency&gt;\n     &lt;groupId&gt;org.dromara&lt;/groupId&gt;\n     &lt;artifactId&gt;soul-client-apache-dubbo&lt;/artifactId&gt;\n     &lt;version&gt;2.1.0-RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<ul>\n<li>yml配置</li>\n</ul>\n<pre><code class=\"language-yml\"><span class=\"hljs-attr\">soul:</span>\n  <span class=\"hljs-attr\">dubbo:</span>\n    <span class=\"hljs-attr\">adminUrl:</span> <span class=\"hljs-string\">http://localhost:9095</span>\n    <span class=\"hljs-attr\">contextPath:</span> <span class=\"hljs-string\">/http</span>\n    <span class=\"hljs-attr\">appName:</span> <span class=\"hljs-string\">http</span>\n\n\n<span class=\"hljs-comment\"># adminUrl: 为你启动的soul-admin 项目的ip + 端口，注意要加http://</span>\n<span class=\"hljs-comment\"># contextPath: 为你的这个mvc项目在soul网关的路由前缀，这个你应该懂意思把？ 比如/order ，/product 等等，网关会根据你的这个前缀来进行路由.</span>\n<span class=\"hljs-comment\"># appName：你的应用名称，不配置的话，会默认取 dubbo配置中application 中的名称</span>\n</code></pre>\n<ul>\n<li>在实现类上加上 <code>soulClient</code> 注解</li>\n</ul>\n<pre><code>@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\npublic @interface SoulClient {\n\n    /**\n     * 提供出去的接口路径,http路径\n     * Path string.\n     *\n     * @return the string\n     */\n    String path();\n\n    /**\n     * 接口路径描述,方便用户选择.\n     *\n     * @return String\n     */\n    String desc();\n\n    /**\n     * Enabled boolean.\n     *\n     * @return the boolean\n     */\n    boolean enabled() default true;\n</code></pre>\n<ul>\n<li>启动你的提供者,大功告成，你的dubbo接口已经发布到 soul网关.如果还有不懂的，可以参考 <code>soul-test-dubbo</code>项目.</li>\n</ul>\n<h2>dubbo 插件设置</h2>\n<ul>\n<li>\n<p>首先在 <code>soul-admin</code> 插件管理中，把dubbo插件设置为开启。</p>\n</li>\n<li>\n<p>其次在 dubbo插件中配置你的注册地址: 改成你的zookeeper地址，或者其他注册中心的地址.</p>\n</li>\n</ul>\n<pre><code>{&quot;register&quot;:&quot;zookeeper://localhost:2181&quot;}\n\n</code></pre>\n",
  "link": "\\zh-cn\\docs\\soul\\joinUp-dubbo.html",
  "meta": {
    "title": "接入soul网关",
    "keywords": "soul",
    "description": "接入soul网关"
  }
}
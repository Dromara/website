{
  "filename": "metaData.md",
  "__html": "<h2>说明</h2>\n<ul>\n<li>本篇主要讲解在soul网关中元数据的概念，设计，以及如何对接。</li>\n</ul>\n<h2>技术方案</h2>\n<ul>\n<li>\n<p>在数据库中，新增了一张表，然后通过数据同步的方案，会把这张表的数据同步到网关JVM内存。</p>\n</li>\n<li>\n<p>表结构如下:</p>\n</li>\n</ul>\n<pre><code>CREATE TABLE  IF NOT EXISTS `meta_data` (\n  `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'id',\n  `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '应用名称',\n  `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '路径,不能重复',\n  `path_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '路径描述',\n  `rpc_type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'rpc类型',\n  `service_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '服务名称',\n  `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '方法名称',\n  `parameter_types` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '参数类型 多个参数类型 逗号隔开',\n  `rpc_ext` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'rpc的扩展信息，json格式',\n  `date_created` datetime(0) NOT NULL COMMENT '创建时间',\n  `date_updated` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '更新时间',\n  `enabled` tinyint(4) NOT NULL DEFAULT 0 COMMENT '启用状态',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;\n\n</code></pre>\n<ul>\n<li>\n<p>元数据设计，目前最主要的是对dubbo的泛化调用上进行使用。</p>\n</li>\n<li>\n<p>我重点讲一下 <code>path</code> 字段，在请求网关的时候，会根据你的path字段来匹配到一条数据，然后进行后续的流程</p>\n</li>\n<li>\n<p>重点讲一下 <code>rpc_ext</code>字段,如果是dubbo类型的服务接口，如果服务接口设置了 group,version字段的时候，会存在这个字段.</p>\n<ul>\n<li>dubbo 类型 字段结构是 如下，那么存储的就是json格式的字符串..</li>\n</ul>\n<pre><code> public static class RpcExt {\n        \n        private String group;\n        \n        private String version;\n        \n        private String loadbalance;\n        \n        private Integer retries;\n        \n        private Integer timeout;\n\n    }\n</code></pre>\n</li>\n</ul>\n<h2>元数据存储</h2>\n<ul>\n<li>\n<p>每个dubbo接口方法，对应一条元数据。</p>\n</li>\n<li>\n<p>springcloud协议，只会存储一条数据， path为 <code>/contextPath/**</code>。</p>\n</li>\n<li>\n<p>http服务，则不会有任何数据。</p>\n</li>\n</ul>\n",
  "link": "\\zh-cn\\docs\\soul\\metaData.html",
  "meta": {
    "title": "元数据概念设计",
    "keywords": "soul",
    "description": "元数据概念设计"
  }
}
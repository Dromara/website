{
  "filename": "plugin-sign.md",
  "__html": "<h2>说明</h2>\n<ul>\n<li>sign插件是 soul网关自带的，用来对请求进行签名认证的插件。</li>\n</ul>\n<h2>插件设置</h2>\n<ul>\n<li>在 <code>soul-admin</code> -&gt; 插件管理中 --&gt; <code>sign</code>插件设置为开启。</li>\n</ul>\n<h2>插件使用</h2>\n<ul>\n<li>在网关的 pom.xml 文件中添加 <code>sign</code> 的支持。</li>\n</ul>\n<pre><code class=\"language-xml\">  <span class=\"hljs-comment\">&lt;!-- soul sign plugin start--&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>soul-spring-boot-starter-plugin-sign<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${last.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- soul sign plugin end--&gt;</span>\n</code></pre>\n<ul>\n<li>\n<p>选择器和规则，请详细看 : <a href=\"selector.md\">选择器规则</a>。</p>\n<ul>\n<li>只有匹配的请求，才会进行签名认证。</li>\n</ul>\n</li>\n</ul>\n<h2>新增 AK/SK</h2>\n<ul>\n<li>在soul-admin --&gt; 认证管理中，点击新增，新增一条 AK/SK。</li>\n</ul>\n<h2>网关技术实现</h2>\n<ul>\n<li>采用Ak/SK鉴权技术方案。</li>\n<li>采用鉴权插件，责任链的模式的模式来完成。</li>\n<li>当鉴权插件开启，并配置所有接口鉴权时候生效。</li>\n</ul>\n<h2>鉴权使用指南</h2>\n<ul>\n<li>\n<p>第一步：AK/SK由网关来进行分配. 比如分配给你的AK为: <code>1TEST123456781</code>  \tSK为：<code>506EEB535CF740D7A755CB4B9F4A1536</code></p>\n</li>\n<li>\n<p>第一步：确定好你要访问的网关路径 比如 <code>/api/service/abc</code></p>\n</li>\n<li>\n<p>第三步:构造参数（以下是通用参数）</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th style=\"text-align:right\">值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>timestamp</td>\n<td style=\"text-align:right\">当前时间戳(String类型)</td>\n<td style=\"text-align:center\">当前时间的毫秒数（网关会过滤掉5分钟之前的请求）</td>\n</tr>\n<tr>\n<td>path</td>\n<td style=\"text-align:right\">/api/service/abc</td>\n<td style=\"text-align:center\">就是你需要访问的接口路径(根据你访问网关接口自己变更)</td>\n</tr>\n<tr>\n<td>version</td>\n<td style=\"text-align:right\">1.0.0</td>\n<td style=\"text-align:center\">目前定位1.0.0 写死，String类型</td>\n</tr>\n</tbody>\n</table>\n<p>对上述2个字段进行key的自然排序，然后进行字段与字段值拼接最后再拼接上SK,代码示例。</p>\n<p>第一步:首先构造一个Map。</p>\n<pre><code class=\"language-java\">\n   Map&lt;String, String&gt; map = Maps.newHashMapWithExpectedSize(<span class=\"hljs-number\">2</span>);\n   <span class=\"hljs-comment\">//timestamp为毫秒数的字符串形式 String.valueOf(LocalDateTime.now().toInstant(ZoneOffset.of(\"+8\")).toEpochMilli()) </span>\n   map.put(<span class=\"hljs-string\">\"timestamp\"</span>,<span class=\"hljs-string\">\"1571711067186\"</span>);  <span class=\"hljs-comment\">//值应该为毫秒数的字符串形式 </span>\n   map.put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"/api/service/abc\"</span>);\n   map.put(<span class=\"hljs-string\">\"version\"</span>, <span class=\"hljs-string\">\"1.0.0\"</span>);\n</code></pre>\n<p>第二步:进行Key的自然排序，然后Key，Value值拼接最后再拼接分配给你的Sk。</p>\n<pre><code class=\"language-java\">List&lt;String&gt; storedKeys = Arrays.stream(map.keySet()\n                .toArray(<span class=\"hljs-keyword\">new</span> String[]{}))\n                .sorted(Comparator.naturalOrder())\n                .collect(Collectors.toList());\n<span class=\"hljs-keyword\">final</span> String sign = storedKeys.stream()\n                .map(key -&gt; String.join(<span class=\"hljs-string\">\"\"</span>, key, params.get(key)))\n                .collect(Collectors.joining()).trim()\n                .concat(<span class=\"hljs-string\">\"506EEB535CF740D7A755CB4B9F4A1536\"</span>);\n</code></pre>\n<ul>\n<li>你得到的sign值应该为:path/api/service/abctimestamp1571711067186version1.0.0506EEB535CF740D7A755CB4B9F4A1536</li>\n</ul>\n<p>第三步:进行Md5加密后转成大写。</p>\n<pre><code class=\"language-java\">DigestUtils.md5DigestAsHex(sign.getBytes()).toUpperCase()\n</code></pre>\n<ul>\n<li>最后得到的值为:A021BF82BE342668B78CD9ADE593D683</li>\n</ul>\n<h2>请求网关</h2>\n<ul>\n<li>\n<p>假如你访问的路径为 :/api/service/abc。</p>\n</li>\n<li>\n<p>访问地址 ：http:网关的域名/api/service/abc。</p>\n</li>\n<li>\n<p>设置<code>header</code>头，<code>header</code>头参数为：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th style=\"text-align:right\">值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>timestamp</td>\n<td style=\"text-align:right\"><code>1571711067186</code></td>\n<td style=\"text-align:center\">上述你进行签名的时候使用的时间值</td>\n</tr>\n<tr>\n<td>appKey</td>\n<td style=\"text-align:right\"><code>1TEST123456781</code></td>\n<td style=\"text-align:center\">分配给你的Ak值</td>\n</tr>\n<tr>\n<td>sign</td>\n<td style=\"text-align:right\"><code>A90E66763793BDBC817CF3B52AAAC041</code></td>\n<td style=\"text-align:center\">上述得到的签名值</td>\n</tr>\n<tr>\n<td>version</td>\n<td style=\"text-align:right\"><code>1.0.0</code></td>\n<td style=\"text-align:center\">写死，就为这个值</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>签名插件会默认过滤5分钟之后的请求</li>\n</ul>\n<h2>如果认证不通过会返回 code 为401 message可能会有变动。</h2>\n<pre><code class=\"language-json\">\"code\":401,\"message\":\"sign is not pass,Please check you sign algorithm!\",\"data\":null}\n</code></pre>\n<h2>签名认证算法扩展</h2>\n<ul>\n<li>请参考开发者文档中的 <a href=\"dev-sign.md\">扩展签名算法</a>。</li>\n</ul>\n",
  "link": "\\zh-cn\\docs\\soul\\plugin-sign.html",
  "meta": {
    "title": "sign插件",
    "keywords": "sign",
    "description": "sign插件"
  }
}
{
  "filename": "user-springcloud.md",
  "__html": "<h1>SpringCloud引入依赖与配置</h1>\n<h2>引入 hmily配置</h2>\n<ul>\n<li>\n<p>在项目的 <code>resource</code> 添加文件名为:<code>hmily.yml</code> 的配置文件</p>\n</li>\n<li>\n<p>具体的参数配置可以参考<a href=\"config.md\">配置详解</a>,<a href=\"config-local.md\">本地配置模式</a>, <a href=\"config-zookeeper.md\">zookeeper配置模式</a>, <a href=\"config-nacos.md\">nacos配置模式</a>,<a href=\"config-apollo.md\">apollo配置模式</a></p>\n</li>\n</ul>\n<h2>Spring-Namespace</h2>\n<ul>\n<li>引入依赖</li>\n</ul>\n<pre><code class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hmily-springcloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>{last.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<ul>\n<li>在xml中进行如下配置</li>\n</ul>\n<pre><code class=\"language-xml\">    <span class=\"hljs-comment\">&lt;!--配置扫码hmily框架的包--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">\"org.dromara.hmily.*\"</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--设置开启aspectj-autoproxy--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspectj-autoproxy</span> <span class=\"hljs-attr\">expose-proxy</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--配置Hmily启动的bean参数--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"hmilyApplicationContextAware\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.dromara.hmily.spring.HmilyApplicationContextAware\"</span>/&gt;</span>\n</code></pre>\n<h2>Spring-Boot-Starter</h2>\n<ul>\n<li>引入依赖</li>\n</ul>\n<pre><code class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hmily-spring-boot-starter-springcloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>{last.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<h1>SpringCloud项目使用</h1>\n<h2>TCC模式</h2>\n<h3>服务提供者</h3>\n<ul>\n<li>\n<p>只需要在参与分布式事务调用的具体实现方法上加<code>@HmilyTCC(confirmMethod = &quot;confirm&quot;, cancelMethod = &quot;cancel&quot;)</code></p>\n</li>\n<li>\n<p><code>confirmMethod</code> : 注解标识方法的，确认方法名称，该方法参数列表与返回类型应与标识方法一致。</p>\n</li>\n<li>\n<p><code>cancelMethod</code> :  注解标识方法的，回滚方法名称，该方法参数列表与返回类型应与标识方法一致。</p>\n</li>\n</ul>\n<h3>服务消费者</h3>\n<ul>\n<li>在服务被调用方的<code>@FeignClient</code> 接口方法上加上 <code>@HmilyTCC</code>注解。</li>\n</ul>\n<h2>TAC模式</h2>\n<h3>服务提供者</h3>\n<ul>\n<li>只需要在参与分布式事务调用的具体实现方法上加<code>@HmilyTAC</code></li>\n</ul>\n<h3>服务消费者</h3>\n<ul>\n<li>在服务被调用方的<code>@FeignClient</code> 接口方法上加上 <code>@HmilyTAC</code>注解。</li>\n</ul>\n<h2>重要注意事项</h2>\n<p>在调用任何RPC调用之前，必须在本地一个<code>service</code>方法上，先行添加 <code>@HmilyTCC</code> 或者 <code>@HmilyTAC</code> 注解,标识开启全局事务。</p>\n<h4>负载均衡</h4>\n<ul>\n<li>如果服务部署了几个节点， 负载均衡算法最好使用 <code>hmily</code>自带, 这样 <code>try</code>, <code>confirm</code>, <code>cancel</code> 调用会落在同一个节点\n充分利用了缓存，提搞了效率。在你的yaml配置如下：</li>\n</ul>\n<pre><code class=\"language-yaml\">\n<span class=\"hljs-string\">hmily.ribbon.rule.enabled</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-literal\">true</span>\n\n</code></pre>\n<h4>开启hystrix</h4>\n<ul>\n<li>如果用户配置了<code>feign.hystrix.enabled = true</code>, 默认使用线程池模式， 将会开启 <code>HmilyHystrixConcurrencyStrategy</code>\n它在hystrix使用线程池模式的时候，能够照样通过<code>threadLoacl</code> 进行RPC传参数。</li>\n</ul>\n<h4>设置永不重试</h4>\n<ul>\n<li>需要进行分布式事务的SpringCloud微服务的调用方需要设置不重试，如下是参考：</li>\n</ul>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">ribbon:</span>\n    <span class=\"hljs-attr\">MaxAutoRetriesNextServer :</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-attr\">MaxAutoRetries:</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<h4>异常</h4>\n<ul>\n<li><code>try</code>, <code>confirm</code>, <code>cancel</code> 方法的所有异常不要自行<code>catch</code> 任何异常都应该抛出给 <code>Hmily</code>框架处理。</li>\n</ul>\n",
  "link": "\\zh-cn\\docs\\hmily\\user-springcloud.html",
  "meta": {
    "title": "SpringCloud用户指南",
    "keywords": "SpringCloud",
    "description": "Hmily-SpringCloud分布式事务用户指南"
  }
}
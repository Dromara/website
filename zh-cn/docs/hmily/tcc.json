{
  "filename": "tcc.md",
  "__html": "<h3>TCC</h3>\n<p>TCC模式是经典的柔性事务解决方案，需要使用者提供 <code>try</code>, <code>confirm</code>, <code>cancel</code> 三个方法，\n真正的情况下会执行 <code>try</code>, <code>confirm</code>, 异常情况下会执行<code>try</code>, <code>cancel</code>。 <code>confirm</code> 方法并不是\n必须的，完全依赖于用户的<code>try</code> 方法如何去写。 <code>confirm</code>, <code>cancel</code> 2个方法也需要用户去保证幂等性,\n这会附加一定的工作量，由于在<code>try</code>方法完成之后，数据已经提交了，因此它并不保证数据的隔离性。但是这样，它的\n性能相对较高，一个好的系统设计，是非常适用适用<code>TCC</code>模式。下面是<code>Hmily</code> 框架的 <code>TCC</code> 流程图\n<img src=\"https://yu199195.github.io/images/hmily/hmily-tcc.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>在极端异常情况下，比如服务突然宕机，超时异常等，依赖与自身的调用任务，来进行日志的事务恢复。</p>\n</li>\n<li>\n<p>在<code>confirm</code>, <code>cancel</code> 阶段，如果有任何异常会继续执行相应的阶段，如果超过最大重试次数还未成功，将不再进行重试，需要人工介入。</p>\n</li>\n<li>\n<p>在服务集群的情况下，<code>confirm</code>, <code>cancel</code> 2个方法用户去尽量保证其幂等性。</p>\n</li>\n</ul>\n",
  "link": "/zh-cn/docs/hmily/tcc.html",
  "meta": {
    "title": "Hmily-TCC",
    "keywords": "tcc",
    "description": "Hmily-TCC"
  }
}
{
  "filename": "user-motan.md",
  "__html": "<h1>Motan接口部分</h1>\n<ul>\n<li>在你的接口项目中引入jar包。</li>\n</ul>\n<pre><code class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hmily-annotation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>{last.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<ul>\n<li>在需要进行Hmily分布式事务的接口方法上加上 <code>@Hmily</code> 标识。</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">HelloService</span> </span>{\n\n    <span class=\"hljs-meta\">@Hmily</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">say</span><span class=\"hljs-params\">(String hello)</span></span>;\n}\n</code></pre>\n<h1>Dubbo实现项目</h1>\n<ul>\n<li>\n<p>步骤一 ： 引入依赖<code>hmily</code>的jar包</p>\n</li>\n<li>\n<p>步骤二 ： 新增<code>Hmily</code>配置</p>\n</li>\n<li>\n<p>步骤三 ： 在实现方法上添加注解。<code>TC</code>C模式，则需要完成 <code>confirm</code>，<code>cancel</code>方法的开发</p>\n</li>\n</ul>\n<h3>引入依赖</h3>\n<h5>Spring-Namespace</h5>\n<ul>\n<li>引入依赖</li>\n</ul>\n<pre><code class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hmily-motan<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>{last.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<ul>\n<li>在xml中进行如下配置</li>\n</ul>\n<pre><code class=\"language-xml\">    <span class=\"hljs-comment\">&lt;!--设置开启aspectj-autoproxy--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspectj-autoproxy</span> <span class=\"hljs-attr\">expose-proxy</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span> = <span class=\"hljs-string\">\"hmilyTransactionAspect\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.dromara.hmily.spring.aop.SpringHmilyTransactionAspect\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span> = <span class=\"hljs-string\">\"hmilyApplicationContextAware\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.dromara.hmily.spring.HmilyApplicationContextAware\"</span>/&gt;</span>\n\n</code></pre>\n<h5>Spring-Boot-starter</h5>\n<ul>\n<li>用户引入</li>\n</ul>\n<pre><code class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hmily-spring-boot-starter-motan<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>{last.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<h3>引入 hmily配置</h3>\n<ul>\n<li>\n<p>在项目的 <code>resource</code> 添加文件名为:<code>hmily.yml</code>配置文件</p>\n</li>\n<li>\n<p>具体的参数配置可以参考<a href=\"config.md\">配置详解</a>,<a href=\"config-local.md\">本地配置模式</a>, <a href=\"config-zookeeper.md\">zookeeper配置模式</a>, <a href=\"config-nacos.md\">nacos配置模式</a>,<a href=\"config-apollo.md\">apollo配置模式</a></p>\n</li>\n</ul>\n<h3>实现接口上添加注解</h3>\n<p>在上述中，我们已经完成了集成与配置，现在我们来详解说一下如何进行使用。</p>\n<h5>TCC模式</h5>\n<ul>\n<li>\n<p>在添加<code>@Hmily</code> 标识的接口方法的具体实现上 加上<code>@HmilyTCC(confirmMethod = &quot;confirm&quot;, cancelMethod = &quot;cancel&quot;)</code></p>\n</li>\n<li>\n<p><code>confirmMethod</code> : 确认方法名称，该方法参数列表与返回类型应与标识方法一致。</p>\n</li>\n<li>\n<p><code>cancelMethod</code> :  回滚方法名称，该方法参数列表与返回类型应与标识方法一致。</p>\n</li>\n<li>\n<p><code>TCC</code>模式应该保证 <code>confirm</code> 和 <code>cancel</code> 方法的幂等性，用户需要自行去开发这个2个方法，所有的事务的确认与回滚，完全由用户决定。Hmily框架只是负责来进行调用</p>\n</li>\n</ul>\n<pre><code class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">HelloService</span>  </span>{\n\n    <span class=\"hljs-meta\">@HmilyTCC</span>(confirmMethod = <span class=\"hljs-string\">\"sayConfrim\"</span>, cancelMethod = <span class=\"hljs-string\">\"sayCancel\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">say</span><span class=\"hljs-params\">(String hello)</span> </span>{\n         System.out.println(<span class=\"hljs-string\">\"hello world\"</span>);\n    }\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayConfrim</span><span class=\"hljs-params\">(String hello)</span> </span>{\n         System.out.println(<span class=\"hljs-string\">\" confirm hello world\"</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayCancel</span><span class=\"hljs-params\">(String hello)</span> </span>{\n         System.out.println(<span class=\"hljs-string\">\" cancel hello world\"</span>);\n    }\n}\n</code></pre>\n<h1>motan注解用户</h1>\n<p>对于使用 <code>@MotanReferer</code> 注解来注入motan服务的用户，请注意：你可以需要做如下配置:</p>\n<h4>spring-namespace 用户</h4>\n<p>在你的xml配置中，需要将 <code>org.dromara.hmily.spring.annotation.RefererAnnotationBeanPostProcessor</code> 注入成spring的bean</p>\n<pre><code class=\"language-xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span> = <span class=\"hljs-string\">\"refererAnnotationBeanPostProcessor\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.dromara.hmily.spring.annotation.RefererAnnotationBeanPostProcessor\"</span>/&gt;</span>\n</code></pre>\n<h4>spring-boot用户</h4>\n<p>需要在yml文件里面开启注解支持：</p>\n<pre><code class=\"language-yml\"><span class=\"hljs-string\">hmily.support.rpc.annotation</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-literal\">true</span> \n</code></pre>\n<p>或者在项目中显示注入：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Bean</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> BeanPostProcessor <span class=\"hljs-title\">refererAnnotationBeanPostProcessor</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RefererAnnotationBeanPostProcessor();\n}\n</code></pre>\n<h2>TAC模式 (在开发，未发布)</h2>\n<ul>\n<li>对<code>@Hmily</code> 标识的接口方法的具体实现加上<code>@HmilyTAC</code></li>\n</ul>\n<h2>重要注意事项</h2>\n<p>在调用任何RPC调用之前，当你需要聚合rpc调用成为一次分布式事务的时候，需要在聚合RPC调用的方法上，先行添加 <code>@HmilyTCC</code> 或者 <code>@HmilyTAC</code> 注解,表示开启全局事务。</p>\n<h4>负载均衡</h4>\n<ul>\n<li>\n<p>如果服务部署了几个节点， 负载均衡算法最好使用 <code>hmily</code>, 这样 <code>try</code>, <code>confirm</code>, <code>cancel</code> 调用会落在同一个节点\n充分利用了缓存，提搞了效率。</p>\n</li>\n<li>\n<p>支持一下几种 <code>hmilyActiveWeight</code>, <code>hmilyConfigurableWeight</code>,  <code>hmilyConsistent</code>, <code>hmilyLocalFirst</code>, <code>hmilyRandom</code>, <code>hmilyRoundRobin</code> 几种方式均是继承<code>Motan</code>原生的</p>\n</li>\n</ul>\n<pre><code class=\"language-xml\">   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">motan:reference</span>  <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"xxx\"</span>  <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"xxx\"</span> <span class=\"hljs-attr\">loadbalance</span>=<span class=\"hljs-string\">\"hmilyActiveWeight\"</span>/&gt;</span>           \n</code></pre>\n<h4>设置永不重试</h4>\n<ul>\n<li>需要进行分布式事务的Motan接口，调用放要设置为永远不重试(retries=&quot;0&quot;)</li>\n</ul>\n<pre><code class=\"language-xml\">   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">motan:reference</span>  <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"xxx\"</span>  <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"xxx\"</span> <span class=\"hljs-attr\">retries</span>=<span class=\"hljs-string\">\"0\"</span>/&gt;</span>           \n</code></pre>\n<h4>异常</h4>\n<ul>\n<li><code>try</code>, <code>confirm</code>, <code>cancel</code> 方法的所有异常不要自行<code>catch</code> 任何异常都应该抛出给 <code>Hmily</code>框架处理。</li>\n</ul>\n",
  "link": "\\zh-cn\\docs\\hmily\\user-motan.html",
  "meta": {
    "title": "Motan用户指南",
    "keywords": "motan",
    "description": "Hmily-Motan分布式事务用户指南"
  }
}
{
  "filename": "introduction.md",
  "__html": "<h1>Hmily框架特性[<a href=\"https://github.com/yu199195/hmily\">https://github.com/yu199195/hmily</a>]</h1>\n<ul>\n<li>\n<p>无缝集成Spring,Spring boot start。</p>\n</li>\n<li>\n<p>无缝集成Dubbo,SpringCloud,Motan等rpc框架。</p>\n</li>\n<li>\n<p>多种事务日志的存储方式（redis，mongdb,mysql等）。</p>\n</li>\n<li>\n<p>多种不同日志序列化方式（Kryo,protostuff,hession）。</p>\n</li>\n<li>\n<p>事务自动恢复。</p>\n</li>\n<li>\n<p>支持内嵌事务的依赖传递。</p>\n</li>\n<li>\n<p>代码零侵入,配置简单灵活。</p>\n</li>\n</ul>\n<h1>Hmily为什么这么高性能？</h1>\n<h3>1.采用disruptor进行事务日志的异步读写（disruptor是一个无锁，无GC的并发编程框架）</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.hmily.tcc.core.disruptor.publisher;\n\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.common.bean.entity.TccTransaction;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.common.enums.EventTypeEnum;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.core.concurrent.threadpool.HmilyThreadFactory;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.core.coordinator.CoordinatorService;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.core.disruptor.event.HmilyTransactionEvent;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.core.disruptor.factory.HmilyTransactionEventFactory;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.core.disruptor.handler.HmilyConsumerDataHandler;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.core.disruptor.translator.HmilyTransactionEventTranslator;\n<span class=\"hljs-keyword\">import</span> com.lmax.disruptor.BlockingWaitStrategy;\n<span class=\"hljs-keyword\">import</span> com.lmax.disruptor.IgnoreExceptionHandler;\n<span class=\"hljs-keyword\">import</span> com.lmax.disruptor.RingBuffer;\n<span class=\"hljs-keyword\">import</span> com.lmax.disruptor.dsl.Disruptor;\n<span class=\"hljs-keyword\">import</span> com.lmax.disruptor.dsl.ProducerType;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.DisposableBean;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;\n\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.Executor;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.LinkedBlockingQueue;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;\n\n<span class=\"hljs-comment\">/**\n * event publisher.\n *\n * <span class=\"hljs-doctag\">@author</span> xiaoyu(Myth)\n */</span>\n<span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HmilyTransactionEventPublisher</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">DisposableBean</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> Disruptor&lt;HmilyTransactionEvent&gt; disruptor;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> CoordinatorService coordinatorService;\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">HmilyTransactionEventPublisher</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> CoordinatorService coordinatorService)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.coordinatorService = coordinatorService;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * disruptor start.\n     *\n     * <span class=\"hljs-doctag\">@param</span> bufferSize this is disruptor buffer size.\n     * <span class=\"hljs-doctag\">@param</span> threadSize this is disruptor consumer thread size.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> bufferSize, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> threadSize)</span> </span>{\n        disruptor = <span class=\"hljs-keyword\">new</span> Disruptor&lt;&gt;(<span class=\"hljs-keyword\">new</span> HmilyTransactionEventFactory(), bufferSize, r -&gt; {\n            AtomicInteger index = <span class=\"hljs-keyword\">new</span> AtomicInteger(<span class=\"hljs-number\">1</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Thread(<span class=\"hljs-keyword\">null</span>, r, <span class=\"hljs-string\">\"disruptor-thread-\"</span> + index.getAndIncrement());\n        }, ProducerType.MULTI, <span class=\"hljs-keyword\">new</span> BlockingWaitStrategy());\n\n        <span class=\"hljs-keyword\">final</span> Executor executor = <span class=\"hljs-keyword\">new</span> ThreadPoolExecutor(threadSize, threadSize, <span class=\"hljs-number\">0</span>, TimeUnit.MILLISECONDS,\n                <span class=\"hljs-keyword\">new</span> LinkedBlockingQueue&lt;&gt;(),\n                HmilyThreadFactory.create(<span class=\"hljs-string\">\"hmily-log-disruptor\"</span>, <span class=\"hljs-keyword\">false</span>),\n                <span class=\"hljs-keyword\">new</span> ThreadPoolExecutor.AbortPolicy());\n\n        HmilyConsumerDataHandler[] consumers = <span class=\"hljs-keyword\">new</span> HmilyConsumerDataHandler[threadSize];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; threadSize; i++) {\n            consumers[i] = <span class=\"hljs-keyword\">new</span> HmilyConsumerDataHandler(executor, coordinatorService);\n        }\n        disruptor.handleEventsWithWorkerPool(consumers);\n        disruptor.setDefaultExceptionHandler(<span class=\"hljs-keyword\">new</span> IgnoreExceptionHandler());\n        disruptor.start();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * publish disruptor event.\n     *\n     * <span class=\"hljs-doctag\">@param</span> tccTransaction {<span class=\"hljs-doctag\">@linkplain</span> com.hmily.tcc.common.bean.entity.TccTransaction }\n     * <span class=\"hljs-doctag\">@param</span> type           {<span class=\"hljs-doctag\">@linkplain</span> EventTypeEnum}\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">publishEvent</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> TccTransaction tccTransaction, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> type)</span> </span>{\n        <span class=\"hljs-keyword\">final</span> RingBuffer&lt;HmilyTransactionEvent&gt; ringBuffer = disruptor.getRingBuffer();\n        ringBuffer.publishEvent(<span class=\"hljs-keyword\">new</span> HmilyTransactionEventTranslator(type), tccTransaction);\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">destroy</span><span class=\"hljs-params\">()</span> </span>{\n        disruptor.shutdown();\n    }\n}\n</code></pre>\n<ul>\n<li>在这里bufferSize 的默认值是4094 * 4,用户可以根据自行的情况进行配置。</li>\n</ul>\n<pre><code class=\"language-java\">\n   HmilyConsumerDataHandler[] consumers = <span class=\"hljs-keyword\">new</span> HmilyConsumerDataHandler[threadSize];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; threadSize; i++) {\n            consumers[i] = <span class=\"hljs-keyword\">new</span> HmilyConsumerDataHandler(executor, coordinatorService);\n        }\n        disruptor.handleEventsWithWorkerPool(consumers);\n</code></pre>\n<ul>\n<li>这里是采用多个消费者去处理队列里面的任务。</li>\n</ul>\n<h3>2.异步执行confrim,cancel方法。</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.hmily.tcc.core.service.handler;\n\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.common.bean.context.TccTransactionContext;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.common.bean.entity.TccTransaction;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.common.enums.TccActionEnum;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.core.concurrent.threadpool.HmilyThreadFactory;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.core.service.HmilyTransactionHandler;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.core.service.executor.HmilyTransactionExecutor;\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;\n\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.Executor;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.LinkedBlockingQueue;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;\n\n<span class=\"hljs-comment\">/**\n * this is transaction starter.\n *\n * <span class=\"hljs-doctag\">@author</span> xiaoyu\n */</span>\n<span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StarterHmilyTransactionHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">HmilyTransactionHandler</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> MAX_THREAD = Runtime.getRuntime().availableProcessors() &lt;&lt; <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> HmilyTransactionExecutor hmilyTransactionExecutor;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Executor executor = <span class=\"hljs-keyword\">new</span> ThreadPoolExecutor(MAX_THREAD, MAX_THREAD, <span class=\"hljs-number\">0</span>, TimeUnit.MILLISECONDS,\n            <span class=\"hljs-keyword\">new</span> LinkedBlockingQueue&lt;&gt;(),\n            HmilyThreadFactory.create(<span class=\"hljs-string\">\"hmily-execute\"</span>, <span class=\"hljs-keyword\">false</span>),\n            <span class=\"hljs-keyword\">new</span> ThreadPoolExecutor.AbortPolicy());\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">StarterHmilyTransactionHandler</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> HmilyTransactionExecutor hmilyTransactionExecutor)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.hmilyTransactionExecutor = hmilyTransactionExecutor;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> ProceedingJoinPoint point, <span class=\"hljs-keyword\">final</span> TccTransactionContext context)</span>\n            <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n        Object returnValue;\n        <span class=\"hljs-keyword\">try</span> {\n            TccTransaction tccTransaction = hmilyTransactionExecutor.begin(point);\n            <span class=\"hljs-keyword\">try</span> {\n                <span class=\"hljs-comment\">//execute try</span>\n                returnValue = point.proceed();\n                tccTransaction.setStatus(TccActionEnum.TRYING.getCode());\n                hmilyTransactionExecutor.updateStatus(tccTransaction);\n            } <span class=\"hljs-keyword\">catch</span> (Throwable throwable) {\n                <span class=\"hljs-comment\">//if exception ,execute cancel</span>\n                <span class=\"hljs-keyword\">final</span> TccTransaction currentTransaction = hmilyTransactionExecutor.getCurrentTransaction();\n                executor.execute(() -&gt; hmilyTransactionExecutor\n                        .cancel(currentTransaction));\n                <span class=\"hljs-keyword\">throw</span> throwable;\n            }\n            <span class=\"hljs-comment\">//execute confirm</span>\n            <span class=\"hljs-keyword\">final</span> TccTransaction currentTransaction = hmilyTransactionExecutor.getCurrentTransaction();\n            executor.execute(() -&gt; hmilyTransactionExecutor.confirm(currentTransaction));\n        } <span class=\"hljs-keyword\">finally</span> {\n            hmilyTransactionExecutor.remove();\n        }\n        <span class=\"hljs-keyword\">return</span> returnValue;\n    }\n}\n</code></pre>\n<ul>\n<li>当try方法的AOP切面有异常的时候，采用线程池异步去执行cancel，无异常的时候去执行confrim方法。</li>\n</ul>\n<h3>这里有人可能会问：那么cancel方法异常，或者confrim方法异常怎么办呢？</h3>\n<p>答：首先这种情况是非常罕见的，因为你上一面才刚刚执行完try。其次如果出现这种情况，在try阶段会保存好日志，Hmily有内置的调度线程池来进行恢复，不用担心。</p>\n<h3>有人又会问：这里如果日志保存异常了怎么办？</h3>\n<p>答：首先这又是一个牛角尖问题，首先日志配置的参数，在框架启动的时候，会要求你配置的。其次，就算在运行过程中日志保存异常，这时候框架会取缓存中的，并不会影响程序正确执行。最后，万一日志保存异常了，系统又在很极端的情况下down机了，恭喜你，你可以去买彩票了，最好的解决办法就是不去解决它。</p>\n<h3>3.ThreadLocal缓存的使用。</h3>\n<pre><code class=\"language-java\">  <span class=\"hljs-comment\">/**\n     * transaction begin.\n     *\n     * <span class=\"hljs-doctag\">@param</span> point cut point.\n     * <span class=\"hljs-doctag\">@return</span> TccTransaction\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> TccTransaction <span class=\"hljs-title\">begin</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> ProceedingJoinPoint point)</span> </span>{\n        LogUtil.debug(LOGGER, () -&gt; <span class=\"hljs-string\">\"......hmily transaction！start....\"</span>);\n        <span class=\"hljs-comment\">//build tccTransaction</span>\n        <span class=\"hljs-keyword\">final</span> TccTransaction tccTransaction = buildTccTransaction(point, TccRoleEnum.START.getCode(), <span class=\"hljs-keyword\">null</span>);\n        <span class=\"hljs-comment\">//save tccTransaction in threadLocal</span>\n        CURRENT.set(tccTransaction);\n        <span class=\"hljs-comment\">//publishEvent</span>\n        hmilyTransactionEventPublisher.publishEvent(tccTransaction, EventTypeEnum.SAVE.getCode());\n        <span class=\"hljs-comment\">//set TccTransactionContext this context transfer remote</span>\n        TccTransactionContext context = <span class=\"hljs-keyword\">new</span> TccTransactionContext();\n        <span class=\"hljs-comment\">//set action is try</span>\n        context.setAction(TccActionEnum.TRYING.getCode());\n        context.setTransId(tccTransaction.getTransId());\n        context.setRole(TccRoleEnum.START.getCode());\n        TransactionContextLocal.getInstance().set(context);\n        <span class=\"hljs-keyword\">return</span> tccTransaction;\n    }\n</code></pre>\n<ul>\n<li>首先要理解，threadLocal保存的发起者一方法的事务信息。这个很重要，不要会有点懵逼。rpc的调用，会形成调用链，进行保存。</li>\n</ul>\n<pre><code class=\"language-java\">\n<span class=\"hljs-comment\">/**\n    * add participant.\n    *\n    * <span class=\"hljs-doctag\">@param</span> participant {<span class=\"hljs-doctag\">@linkplain</span> Participant}\n    */</span>\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">enlistParticipant</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Participant participant)</span> </span>{\n       <span class=\"hljs-keyword\">if</span> (Objects.isNull(participant)) {\n           <span class=\"hljs-keyword\">return</span>;\n       }\n       Optional.ofNullable(getCurrentTransaction())\n               .ifPresent(c -&gt; {\n                   c.registerParticipant(participant);\n                   updateParticipant(c);\n               });\n   }\n</code></pre>\n<h3>4.GuavaCache的使用</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.hmily.tcc.core.cache;\n\n<span class=\"hljs-keyword\">import</span> com.google.common.cache.CacheBuilder;\n<span class=\"hljs-keyword\">import</span> com.google.common.cache.CacheLoader;\n<span class=\"hljs-keyword\">import</span> com.google.common.cache.LoadingCache;\n<span class=\"hljs-keyword\">import</span> com.google.common.cache.Weigher;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.common.bean.entity.TccTransaction;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.core.coordinator.CoordinatorService;\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.core.helper.SpringBeanUtils;\n<span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;\n\n<span class=\"hljs-keyword\">import</span> java.util.Optional;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.ExecutionException;\n\n<span class=\"hljs-comment\">/**\n * use google guava cache.\n * <span class=\"hljs-doctag\">@author</span> xiaoyu\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TccTransactionCacheManager</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> MAX_COUNT = <span class=\"hljs-number\">10000</span>;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> LoadingCache&lt;String, TccTransaction&gt; LOADING_CACHE =\n            CacheBuilder.newBuilder().maximumWeight(MAX_COUNT)\n                    .weigher((Weigher&lt;String, TccTransaction&gt;) (string, tccTransaction) -&gt; getSize())\n                    .build(<span class=\"hljs-keyword\">new</span> CacheLoader&lt;String, TccTransaction&gt;() {\n                        <span class=\"hljs-meta\">@Override</span>\n                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> TccTransaction <span class=\"hljs-title\">load</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String key)</span> </span>{\n                            <span class=\"hljs-keyword\">return</span> cacheTccTransaction(key);\n                        }\n                    });\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> CoordinatorService coordinatorService = SpringBeanUtils.getInstance().getBean(CoordinatorService.class);\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> TccTransactionCacheManager TCC_TRANSACTION_CACHE_MANAGER = <span class=\"hljs-keyword\">new</span> TccTransactionCacheManager();\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">TccTransactionCacheManager</span><span class=\"hljs-params\">()</span> </span>{\n\n    }\n\n    <span class=\"hljs-comment\">/**\n     * TccTransactionCacheManager.\n     *\n     * <span class=\"hljs-doctag\">@return</span> TccTransactionCacheManager\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> TccTransactionCacheManager <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> TCC_TRANSACTION_CACHE_MANAGER;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">int</span>) LOADING_CACHE.size();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> TccTransaction <span class=\"hljs-title\">cacheTccTransaction</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String key)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> Optional.ofNullable(coordinatorService.findByTransId(key)).orElse(<span class=\"hljs-keyword\">new</span> TccTransaction());\n    }\n\n    <span class=\"hljs-comment\">/**\n     * cache tccTransaction.\n     *\n     * <span class=\"hljs-doctag\">@param</span> tccTransaction {<span class=\"hljs-doctag\">@linkplain</span> TccTransaction}\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">cacheTccTransaction</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> TccTransaction tccTransaction)</span> </span>{\n        LOADING_CACHE.put(tccTransaction.getTransId(), tccTransaction);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * acquire TccTransaction.\n     *\n     * <span class=\"hljs-doctag\">@param</span> key this guava key.\n     * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@linkplain</span> TccTransaction}\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> TccTransaction <span class=\"hljs-title\">getTccTransaction</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String key)</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">return</span> LOADING_CACHE.get(key);\n        } <span class=\"hljs-keyword\">catch</span> (ExecutionException e) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> TccTransaction();\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * remove guava cache by key.\n     * <span class=\"hljs-doctag\">@param</span> key guava cache key.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeByKey</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String key)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (StringUtils.isNotEmpty(key)) {\n            LOADING_CACHE.invalidate(key);\n        }\n    }\n\n}\n</code></pre>\n<ul>\n<li>在参与者中，我们使用了ThreadLocal，而在参与者中，我们为什么不使用呢？\n其实原因有二点：首先.因为try，和confrim 会不在一个线程里，会造成ThreadLocal失效。当考虑到RPC集群的时候，可能会负载到不同的机器上。这里有一个细节就是：</li>\n</ul>\n<pre><code class=\"language-java\">   <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> TccTransaction <span class=\"hljs-title\">cacheTccTransaction</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String key)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> Optional.ofNullable(coordinatorService.findByTransId(key)).orElse(<span class=\"hljs-keyword\">new</span> TccTransaction());\n    }\n</code></pre>\n<p>当GuavaCache里面没有的时候，会去查询日志返回，这样就保证了对集群环境的支持。</p>\n<h3>以上4点造就了Hmily是一个异步的高性能分布式事务TCC框架的原因。</h3>\n<h3>Hmily如何使用？（<a href=\"https://github.com/yu199195/hmily/tree/master/hmily-tcc-demo%EF%BC%89\">https://github.com/yu199195/hmily/tree/master/hmily-tcc-demo）</a></h3>\n<p>首先因为之前的包命名问题，框架包并没有上传到maven中心仓库，固需要使用者自己拉取代码，编译deploy到自己的私服。</p>\n<h3>1.dubbo用户</h3>\n<ul>\n<li>在你的Api接口项目引入</li>\n</ul>\n<pre><code class=\"language-xml\">\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.hmily.tcc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hmily-tcc-annotation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>{you version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<ul>\n<li>在你的服务提供者项目引入</li>\n</ul>\n<pre><code class=\"language-xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.hmily.tcc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hmily-tcc-dubbo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>{you version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<ul>\n<li>配置启动bean</li>\n</ul>\n<pre><code class=\"language-xml\">\n<span class=\"hljs-comment\">&lt;!-- Aspect 切面配置，是否开启AOP切面--&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspectj-autoproxy</span> <span class=\"hljs-attr\">expose-proxy</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n  <span class=\"hljs-comment\">&lt;!--扫描框架的包--&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">\"com.hmily.tcc.*\"</span>/&gt;</span>\n  <span class=\"hljs-comment\">&lt;!--启动类属性配置--&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"hmilyTransactionBootstrap\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.hmily.tcc.core.bootstrap.HmilyTransactionBootstrap\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serializer\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"kryo\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"recoverDelayTime\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"120\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"retryMax\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"3\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"scheduledDelay\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"120\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"scheduledThreadMax\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"4\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"repositorySupport\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"db\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"tccDbConfig\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.hmily.tcc.common.config.TccDbConfig\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"url\"</span>\n                          <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"jdbc:mysql://192.168.1.98:3306/tcc?useUnicode=true&amp;amp;characterEncoding=utf8\"</span>/&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"driverClassName\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"com.mysql.jdbc.Driver\"</span>/&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"username\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"root\"</span>/&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"123456\"</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<ul>\n<li>当然配置属性很多，这里我只给出了demo，具体可以参考这个类：</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.hmily.tcc.common.config;\n\n<span class=\"hljs-keyword\">import</span> com.hmily.tcc.common.enums.RepositorySupportEnum;\n<span class=\"hljs-keyword\">import</span> lombok.Data;\n\n<span class=\"hljs-comment\">/**\n * hmily config.\n *\n * <span class=\"hljs-doctag\">@author</span> xiaoyu\n */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TccConfig</span> </span>{\n\n\n    <span class=\"hljs-comment\">/**\n     * Resource suffix this parameter please fill in about is the transaction store path.\n     * If it's a table store this is a table suffix, it's stored the same way.\n     * If this parameter is not filled in, the applicationName of the application is retrieved by default\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String repositorySuffix;\n\n    <span class=\"hljs-comment\">/**\n     * log serializer.\n     * {<span class=\"hljs-doctag\">@linkplain</span> com.hmily.tcc.common.enums.SerializeEnum}\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String serializer = <span class=\"hljs-string\">\"kryo\"</span>;\n\n    <span class=\"hljs-comment\">/**\n     * scheduledPool Thread size.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> scheduledThreadMax = Runtime.getRuntime().availableProcessors() &lt;&lt; <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">/**\n     * scheduledPool scheduledDelay unit SECONDS.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> scheduledDelay = <span class=\"hljs-number\">60</span>;\n\n    <span class=\"hljs-comment\">/**\n     * retry max.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> retryMax = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-comment\">/**\n     * recoverDelayTime Unit seconds\n     * (note that this time represents how many seconds after the local transaction was created before execution).\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> recoverDelayTime = <span class=\"hljs-number\">60</span>;\n\n    <span class=\"hljs-comment\">/**\n     * Parameters when participants perform their own recovery.\n     * 1.such as RPC calls time out\n     * 2.such as the starter down machine\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> loadFactor = <span class=\"hljs-number\">2</span>;\n\n    <span class=\"hljs-comment\">/**\n     * repositorySupport.\n     * {<span class=\"hljs-doctag\">@linkplain</span> RepositorySupportEnum}\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String repositorySupport = <span class=\"hljs-string\">\"db\"</span>;\n\n    <span class=\"hljs-comment\">/**\n     * disruptor bufferSize.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> bufferSize = <span class=\"hljs-number\">4096</span> * <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">2</span>;\n\n    <span class=\"hljs-comment\">/**\n     * this is disruptor consumerThreads.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> consumerThreads = Runtime.getRuntime().availableProcessors() &lt;&lt; <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">/**\n     * db config.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> TccDbConfig tccDbConfig;\n\n    <span class=\"hljs-comment\">/**\n     * mongo config.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> TccMongoConfig tccMongoConfig;\n\n    <span class=\"hljs-comment\">/**\n     * redis config.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> TccRedisConfig tccRedisConfig;\n\n    <span class=\"hljs-comment\">/**\n     * zookeeper config.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> TccZookeeperConfig tccZookeeperConfig;\n\n    <span class=\"hljs-comment\">/**\n     * file config.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> TccFileConfig tccFileConfig;\n\n}\n</code></pre>\n<h3>SpringCloud用户</h3>\n<pre><code class=\"language-xml\">     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.hmily.tcc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hmily-tcc-springcloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>{you version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<h3>Motan用户</h3>\n<pre><code class=\"language-xml\">     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.hmily.tcc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hmily-tcc-motan<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>{you version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<h3>hmily-spring-boot-start那这个就更容易了，只需要根据你的RPC框架去引入不同的jar包。</h3>\n<ul>\n<li>如果你是dubbo用户，那么引入</li>\n</ul>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.hmily.tcc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hmily-tcc-spring-boot-starter-dubbo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${your version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<ul>\n<li>如果你是SpringCloud用户，那么引入</li>\n</ul>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.hmily.tcc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hmily-tcc-spring-boot-starter-springcloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${your version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<ul>\n<li>如果你是Motan用户，那么引入:</li>\n</ul>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.hmily.tcc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hmily-tcc-spring-boot-starter-motan<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${your version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<ul>\n<li>然后在你的yml里面进行如下配置：</li>\n</ul>\n<pre><code class=\"language-yml\"><span class=\"hljs-attr\">hmily:</span>\n    <span class=\"hljs-string\">tcc</span> <span class=\"hljs-string\">:</span>\n        <span class=\"hljs-string\">serializer</span> <span class=\"hljs-string\">:</span> <span class=\"hljs-string\">kryo</span>\n        <span class=\"hljs-string\">recoverDelayTime</span> <span class=\"hljs-string\">:</span> <span class=\"hljs-number\">128</span>\n        <span class=\"hljs-string\">retryMax</span> <span class=\"hljs-string\">:</span> <span class=\"hljs-number\">3</span>\n        <span class=\"hljs-string\">scheduledDelay</span> <span class=\"hljs-string\">:</span> <span class=\"hljs-number\">128</span>\n        <span class=\"hljs-string\">scheduledThreadMax</span> <span class=\"hljs-string\">:</span>  <span class=\"hljs-number\">10</span>\n        <span class=\"hljs-string\">repositorySupport</span> <span class=\"hljs-string\">:</span> <span class=\"hljs-string\">db</span>\n        <span class=\"hljs-string\">tccDbConfig</span> <span class=\"hljs-string\">:</span>\n                 <span class=\"hljs-string\">driverClassName</span>  <span class=\"hljs-string\">:</span> <span class=\"hljs-string\">com.mysql.jdbc.Driver</span>\n                 <span class=\"hljs-string\">url</span> <span class=\"hljs-string\">:</span>  <span class=\"hljs-attr\">jdbc:mysql://192.168.1.98:3306/tcc?useUnicode=true&amp;amp;characterEncoding=utf8</span>\n                 <span class=\"hljs-string\">username</span> <span class=\"hljs-string\">:</span> <span class=\"hljs-string\">root</span>\n                 <span class=\"hljs-string\">password</span> <span class=\"hljs-string\">:</span> <span class=\"hljs-number\">123456</span>\n\n        <span class=\"hljs-comment\">#repositorySupport : redis</span>\n        <span class=\"hljs-comment\">#tccRedisConfig:</span>\n                 <span class=\"hljs-comment\">#masterName: mymaster</span>\n                 <span class=\"hljs-comment\">#sentinel : true</span>\n                 <span class=\"hljs-comment\">#sentinelUrl : 192.168.1.91:26379;192.168.1.92:26379;192.168.1.93:26379</span>\n                 <span class=\"hljs-comment\">#password  : foobaredbbexONE123</span>\n\n\n       <span class=\"hljs-comment\"># repositorySupport : zookeeper</span>\n       <span class=\"hljs-comment\">#         host      : 92.168.1.73:2181</span>\n       <span class=\"hljs-comment\">#         sessionTimeOut      :  100000</span>\n       <span class=\"hljs-comment\">#         rootPath  : /tcc</span>\n\n       <span class=\"hljs-comment\"># repositorySupport : mongodb</span>\n       <span class=\"hljs-comment\">#       mongoDbUrl  : 192.168.1.68:27017</span>\n       <span class=\"hljs-comment\">#       mongoDbName  :  happylife</span>\n       <span class=\"hljs-comment\">#       mongoUserName  : xiaoyu</span>\n       <span class=\"hljs-comment\">#       mongoUserPwd   : 123456</span>\n\n       <span class=\"hljs-comment\"># repositorySupport : file</span>\n       <span class=\"hljs-comment\">#         path      : /account</span>\n       <span class=\"hljs-comment\">#         prefix    :  account</span>\n</code></pre>\n<ul>\n<li>\n<p>就这么简单，然后就可以在接口方法上加上@Tcc注解，进行愉快的使用了。</p>\n</li>\n<li>\n<p>当然因为篇幅问题，很多东西只是简单的描述，尤其是逻辑方面的。</p>\n</li>\n<li>\n<p>如果你感兴趣，可以在github上进行star和fork，也可以加微信和QQ群进行交流。</p>\n</li>\n<li>\n<p>下面是github地址：<a href=\"https://github.com/yu199195/hmily\">https://github.com/yu199195/hmily</a></p>\n</li>\n<li>\n<p>最后再次感谢大家，如果有兴趣的朋友，可以提供你的优秀牛逼轰轰的PR。。。。</p>\n</li>\n</ul>\n"
}